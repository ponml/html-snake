/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	eval("window.onload = function () {\n    const canvasWidth = 1500;\n    const canvasHeight = 1500;\n    var SEGMENT_SIZE = 20;\n    var FPS = 60;\n    var gameLoop;\n    var gameRunning = true;\n\n    var dirKeyLookup = {\n        37: 'WEST',\n        38: 'NORTH',\n        39: 'EAST',\n        40: 'SOUTH'\n    };\n\n    var unallowedDirLookup = {\n        'WEST': 39,\n        'NORTH': 40,\n        'EAST': 37,\n        'SOUTH': 38\n    };\n\n    var dirUpdateLookup = {\n        NORTH: {\n            y: -1 * SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: -1 * SEGMENT_SIZE\n        }\n    };\n\n    function validDirectionChange(keyCode, currentDirection) {\n        var unallowed = unallowedDirLookup[currentDirection];\n        return keyCode != unallowed;\n    }\n\n    function Snake(options) {\n        var me = this;\n        var x = options.x || 0;\n        var y = options.y || 0;\n\n        me.ctx = options.ctx;\n        me.currentDirection = 'EAST';\n\n        var tail = new SnakeSegment({\n            isTail: true,\n            x: x,\n            y: y,\n            ctx: me.ctx\n        });\n        var body = new SnakeSegment({\n            x: tail.x + SEGMENT_SIZE,\n            y: tail.y,\n            ctx: me.ctx\n        });\n        var head = new SnakeSegment({\n            isHead: true,\n            x: body.x + SEGMENT_SIZE,\n            y: body.y,\n            colour: 'red',\n            ctx: me.ctx\n        });\n\n        tail.next = body;\n        body.next = head;\n\n        me.head = head;\n        me.tail = tail;\n    }\n\n    Snake.prototype.drawAll = function drawAll() {\n        var me = this;\n        var segment = me.tail;\n        segment.draw();\n        while (segment.next) {\n            segment = segment.next;\n            segment.draw();\n        }\n    };\n\n    function SnakeSegment(options) {\n        var me = this;\n\n        me.width = SEGMENT_SIZE;\n        me.height = SEGMENT_SIZE;\n        me.colour = options.colour || \"black\";\n        me.next = options.next || null;\n        me.prev = options.prev || null;\n        me.x = options.x;\n        me.y = options.y;\n        me.ctx = options.ctx;\n    }\n\n    SnakeSegment.prototype.updatePos = function updatePos(x, y) {\n        this.x = x;\n        this.y = y;\n    };\n\n    SnakeSegment.prototype.draw = function draw() {\n        var me = this;\n        me.ctx.fillStyle = me.colour;\n        me.ctx.fillRect(me.x, me.y, me.width, me.height);\n    };\n\n    SnakeSegment.prototype.clear = function clear() {\n        var me = this;\n        me.ctx.clearRect(me.x, me.y, me.width, me.height);\n    };\n\n    SnakeSegment.prototype.drawNext = function drawNext(headSegment, direction) {\n        var me = this;\n        me.isHead = true;\n    };\n\n    console.log(\"GOGOGOGO\");\n\n    document.addEventListener('keydown', function (event) {\n        if (event.keyCode === 81) {\n            clearInterval(gameLoop);\n        } else if (event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 38 || event.keyCode == 40) {\n            //LEFT\n\n            if (validDirectionChange(event.keyCode, snake.currentDirection)) {\n                snake.head.colour = 'black';\n                snake.head.draw();\n                var curHeadX = snake.head.x;\n                var curHeadY = snake.head.y;\n                snake.tail.clear();\n                var newTail = snake.tail.next;\n                var newHead = snake.tail;\n                newHead.next = null;\n                snake.head.next = newHead;\n                snake.head = newHead;\n                snake.tail = newTail;\n                var direction = dirKeyLookup[event.keyCode];\n                var dirctionUpdate = dirUpdateLookup[direction];\n                snake.head.x = curHeadX + dirctionUpdate.x;\n                snake.head.y = curHeadY + dirctionUpdate.y;\n                snake.head.colour = 'red';\n                snake.head.draw();\n                snake.currentDirection = direction;\n            }\n        }\n    });\n\n    var canvasEl = document.getElementById('main');\n    canvasEl.style.backgroundColor = 'rgba(158, 167, 184, 0.2)';\n    canvasEl.width = canvasWidth;\n    canvasEl.height = canvasHeight;\n    var ctx = canvasEl.getContext('2d');\n    var snake = new Snake({\n        x: canvasWidth / 2,\n        y: canvasHeight / 2,\n        ctx: ctx\n    });\n\n    gameLoop = setInterval(function () {\n        snake.drawAll();\n    }, 1000 / FPS);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);