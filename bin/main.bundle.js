/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	eval("window.onload = function () {\n    const canvasWidth = 1520;\n    const canvasHeight = 1520;\n    var SEGMENT_SIZE = 20;\n    var FPS = 60;\n    var gameLoop;\n    var gameRunning = true;\n\n    var dirKeyLookup = {\n        37: 'WEST',\n        38: 'NORTH',\n        39: 'EAST',\n        40: 'SOUTH'\n    };\n\n    var reverseDirKeyLookup = {\n        WEST: 37,\n        NORTH: 38,\n        EAST: 39,\n        SOUTH: 40\n    };\n\n    var unallowedDirLookup = {\n        'WEST': 39,\n        'NORTH': 40,\n        'EAST': 37,\n        'SOUTH': 38\n    };\n\n    var dirUpdateLookup = {\n        NORTH: {\n            y: -1 * SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: -1 * SEGMENT_SIZE\n        }\n    };\n\n    function validDirectionChange(keyCode, currentDirection) {\n        var unallowed = unallowedDirLookup[currentDirection];\n        return keyCode != unallowed;\n    }\n\n    function insideWorldBounds(keyCode, head) {\n        var direction = dirKeyLookup[keyCode];\n        var dirctionUpdate = dirUpdateLookup[direction];\n        var newX = head.x + dirctionUpdate.x;\n        var newY = head.y + dirctionUpdate.y;\n        return newX < canvasWidth && newX >= 0 && newY < canvasHeight && newY >= 0;\n    }\n\n    function Snake(options) {\n        var me = this;\n        var x = options.x || 0;\n        var y = options.y || 0;\n\n        me.ctx = options.ctx;\n        me.currentDirection = 'EAST';\n\n        var tail = new SnakeSegment({\n            isTail: true,\n            x: x,\n            y: y,\n            ctx: me.ctx\n        });\n        var body = new SnakeSegment({\n            x: tail.x + SEGMENT_SIZE,\n            y: tail.y,\n            ctx: me.ctx\n        });\n        var head = new SnakeSegment({\n            isHead: true,\n            x: body.x + SEGMENT_SIZE,\n            y: body.y,\n            colour: 'red',\n            ctx: me.ctx\n        });\n\n        tail.next = body;\n        body.next = head;\n\n        me.head = head;\n        me.tail = tail;\n    }\n\n    Snake.prototype.drawAll = function drawAll() {\n        var me = this;\n        var segment = me.tail;\n        segment.draw();\n        while (segment.next) {\n            segment = segment.next;\n            segment.draw();\n        }\n    };\n\n    function SnakeSegment(options) {\n        var me = this;\n\n        me.width = SEGMENT_SIZE;\n        me.height = SEGMENT_SIZE;\n        me.colour = options.colour || \"black\";\n        me.next = options.next || null;\n        me.prev = options.prev || null;\n        me.x = options.x;\n        me.y = options.y;\n        me.ctx = options.ctx;\n    }\n\n    SnakeSegment.prototype.updatePos = function updatePos(x, y) {\n        this.x = x;\n        this.y = y;\n    };\n\n    SnakeSegment.prototype.draw = function draw() {\n        var me = this;\n        me.ctx.fillStyle = me.colour;\n        me.ctx.fillRect(me.x, me.y, me.width, me.height);\n    };\n\n    SnakeSegment.prototype.clear = function clear() {\n        var me = this;\n        me.ctx.clearRect(me.x, me.y, me.width, me.height);\n    };\n\n    SnakeSegment.prototype.drawNext = function drawNext(headSegment, direction) {\n        var me = this;\n        me.isHead = true;\n    };\n\n    console.log(\"GOGOGOGO\");\n\n    function updateSnakeFromDirection(snake, keycode) {\n        snake.head.colour = 'black';\n        snake.head.draw();\n        var curHeadX = snake.head.x;\n        var curHeadY = snake.head.y;\n        snake.tail.clear();\n        var newTail = snake.tail.next;\n        var newHead = snake.tail;\n        newHead.next = null;\n        snake.head.next = newHead;\n        snake.head = newHead;\n        snake.tail = newTail;\n        var direction = dirKeyLookup[keycode];\n        var dirctionUpdate = dirUpdateLookup[direction];\n        snake.head.x = curHeadX + dirctionUpdate.x;\n        snake.head.y = curHeadY + dirctionUpdate.y;\n        snake.head.colour = 'red';\n        snake.head.draw();\n        snake.currentDirection = direction;\n    }\n\n    document.addEventListener('keydown', function (event) {\n        if (event.keyCode === 81) {\n            clearInterval(gameLoop);\n        } else if (event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 38 || event.keyCode == 40) {\n            //LEFT\n            var validUpdate = validDirectionChange(event.keyCode, snake.currentDirection) && insideWorldBounds(event.keyCode, snake.head);\n            if (validUpdate) {\n                updateSnakeFromDirection(snake, event.keyCode);\n            }\n        } else {}\n    });\n\n    var canvasEl = document.getElementById('main');\n    canvasEl.style.backgroundColor = 'rgba(158, 167, 184, 0.2)';\n    canvasEl.width = canvasWidth;\n    canvasEl.height = canvasHeight;\n    var ctx = canvasEl.getContext('2d');\n    var snake = new Snake({\n        x: canvasWidth / 2,\n        y: canvasHeight / 2,\n        ctx: ctx\n    });\n\n    gameLoop = setInterval(function () {\n        var keyCode = reverseDirKeyLookup[snake.currentDirection];\n        var validUpdate = insideWorldBounds(keyCode, snake.head);\n        if (validUpdate) {\n            updateSnakeFromDirection(snake, keyCode);\n        }\n        snake.drawAll();\n    }, 1000 / FPS);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAuanM/ZDhlZSJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJvbmxvYWQiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsIlNFR01FTlRfU0laRSIsIkZQUyIsImdhbWVMb29wIiwiZ2FtZVJ1bm5pbmciLCJkaXJLZXlMb29rdXAiLCJyZXZlcnNlRGlyS2V5TG9va3VwIiwiV0VTVCIsIk5PUlRIIiwiRUFTVCIsIlNPVVRIIiwidW5hbGxvd2VkRGlyTG9va3VwIiwiZGlyVXBkYXRlTG9va3VwIiwieSIsIngiLCJ2YWxpZERpcmVjdGlvbkNoYW5nZSIsImtleUNvZGUiLCJjdXJyZW50RGlyZWN0aW9uIiwidW5hbGxvd2VkIiwiaW5zaWRlV29ybGRCb3VuZHMiLCJoZWFkIiwiZGlyZWN0aW9uIiwiZGlyY3Rpb25VcGRhdGUiLCJuZXdYIiwibmV3WSIsIlNuYWtlIiwib3B0aW9ucyIsIm1lIiwiY3R4IiwidGFpbCIsIlNuYWtlU2VnbWVudCIsImlzVGFpbCIsImJvZHkiLCJpc0hlYWQiLCJjb2xvdXIiLCJuZXh0IiwicHJvdG90eXBlIiwiZHJhd0FsbCIsInNlZ21lbnQiLCJkcmF3Iiwid2lkdGgiLCJoZWlnaHQiLCJwcmV2IiwidXBkYXRlUG9zIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJjbGVhciIsImNsZWFyUmVjdCIsImRyYXdOZXh0IiwiaGVhZFNlZ21lbnQiLCJjb25zb2xlIiwibG9nIiwidXBkYXRlU25ha2VGcm9tRGlyZWN0aW9uIiwic25ha2UiLCJrZXljb2RlIiwiY3VySGVhZFgiLCJjdXJIZWFkWSIsIm5ld1RhaWwiLCJuZXdIZWFkIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJjbGVhckludGVydmFsIiwidmFsaWRVcGRhdGUiLCJjYW52YXNFbCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJnZXRDb250ZXh0Iiwic2V0SW50ZXJ2YWwiXSwibWFwcGluZ3Mi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LEdBQWlDLDBCQUFqQztBQUNBSCxhQUFTeEIsS0FBVCxHQUFpQnpDLFdBQWpCO0FBQ0FpRSxhQUFTdkIsTUFBVCxHQUFrQnpDLFlBQWxCO0FBQ0EsUUFBSTRCLE1BQU1vQyxTQUFTSSxVQUFULENBQW9CLElBQXBCLENBQVY7QUFDQSxRQUFJZixRQUFRLElBQUk1QixLQUFKLENBQVU7QUFDbEJYLFdBQUdmLGNBQVksQ0FERztBQUVsQmMsV0FBR2IsZUFBYSxDQUZFO0FBR2xCNEIsYUFBS0E7QUFIYSxLQUFWLENBQVo7O0FBTUF6QixlQUFXa0UsWUFBWSxZQUFXO0FBQzlCLFlBQUlyRCxVQUFVVixvQkFBb0IrQyxNQUFNcEMsZ0JBQTFCLENBQWQ7QUFDQSxZQUFJOEMsY0FBYzVDLGtCQUFrQkgsT0FBbEIsRUFBMkJxQyxNQUFNakMsSUFBakMsQ0FBbEI7QUFDQSxZQUFHMkMsV0FBSCxFQUFnQjtBQUNaWCxxQ0FBeUJDLEtBQXpCLEVBQWdDckMsT0FBaEM7QUFDSDtBQUNEcUMsY0FBTWhCLE9BQU47QUFDSCxLQVBVLEVBT1IsT0FBT25DLEdBUEMsQ0FBWDtBQVFILENBbk1EIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICBjb25zdCBjYW52YXNXaWR0aCA9IDE1MjA7XHJcbiAgICBjb25zdCBjYW52YXNIZWlnaHQgPSAxNTIwO1xyXG4gICAgdmFyIFNFR01FTlRfU0laRSA9IDIwXHJcbiAgICB2YXIgRlBTID0gNjA7XHJcbiAgICB2YXIgZ2FtZUxvb3A7XHJcbiAgICB2YXIgZ2FtZVJ1bm5pbmcgPSB0cnVlO1xyXG5cclxuICAgIHZhciBkaXJLZXlMb29rdXAgPSB7XHJcbiAgICAgICAgMzc6ICdXRVNUJyxcclxuICAgICAgICAzODogJ05PUlRIJyxcclxuICAgICAgICAzOTogJ0VBU1QnLFxyXG4gICAgICAgIDQwOiAnU09VVEgnXHJcbiAgICB9O1xyXG5cclxuICAgICB2YXIgcmV2ZXJzZURpcktleUxvb2t1cCA9IHtcclxuICAgICAgICBXRVNUOiAzNyxcclxuICAgICAgICBOT1JUSDogMzgsXHJcbiAgICAgICAgRUFTVDogMzksXHJcbiAgICAgICAgU09VVEg6IDQwXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciB1bmFsbG93ZWREaXJMb29rdXAgPSB7XHJcbiAgICAgICAgJ1dFU1QnOiAzOSxcclxuICAgICAgICAnTk9SVEgnOiA0MCxcclxuICAgICAgICAnRUFTVCc6IDM3LFxyXG4gICAgICAgICdTT1VUSCc6IDM4XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBkaXJVcGRhdGVMb29rdXAgPSB7XHJcbiAgICAgICAgTk9SVEg6IHtcclxuICAgICAgICAgICAgeTogLTEgKiBTRUdNRU5UX1NJWkUsXHJcbiAgICAgICAgICAgIHg6IDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFNPVVRIOiB7XHJcbiAgICAgICAgICAgIHk6IFNFR01FTlRfU0laRSxcclxuICAgICAgICAgICAgeDogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgRUFTVDoge1xyXG4gICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICB4OiBTRUdNRU5UX1NJWkVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFdFU1Q6IHtcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgeDogLTEgKiBTRUdNRU5UX1NJWkVcclxuICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbGlkRGlyZWN0aW9uQ2hhbmdlKGtleUNvZGUsIGN1cnJlbnREaXJlY3Rpb24pIHtcclxuICAgICAgICB2YXIgdW5hbGxvd2VkID0gdW5hbGxvd2VkRGlyTG9va3VwW2N1cnJlbnREaXJlY3Rpb25dXHJcbiAgICAgICAgcmV0dXJuIGtleUNvZGUgIT0gdW5hbGxvd2VkO1xyXG4gICAgfSAgICBcclxuXHJcbiAgICBmdW5jdGlvbiBpbnNpZGVXb3JsZEJvdW5kcyhrZXlDb2RlLCBoZWFkKSB7XHJcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGRpcktleUxvb2t1cFtrZXlDb2RlXTtcclxuICAgICAgICB2YXIgZGlyY3Rpb25VcGRhdGUgPSBkaXJVcGRhdGVMb29rdXBbZGlyZWN0aW9uXTtcclxuICAgICAgICB2YXIgbmV3WCA9IGhlYWQueCArIGRpcmN0aW9uVXBkYXRlLng7XHJcbiAgICAgICAgdmFyIG5ld1kgPSBoZWFkLnkgKyBkaXJjdGlvblVwZGF0ZS55O1xyXG4gICAgICAgIHJldHVybiBuZXdYIDwgY2FudmFzV2lkdGggJiYgIG5ld1ggPj0gMCAmJiBuZXdZIDwgY2FudmFzSGVpZ2h0ICYmIG5ld1kgPj0gMDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gU25ha2Uob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7ICAgXHJcbiAgICAgICAgdmFyIHggPSBvcHRpb25zLnggfHwgMDtcclxuICAgICAgICB2YXIgeSA9IG9wdGlvbnMueSB8fCAwO1xyXG5cclxuICAgICAgICBtZS5jdHggPSBvcHRpb25zLmN0eDtcclxuICAgICAgICBtZS5jdXJyZW50RGlyZWN0aW9uID0gJ0VBU1QnO1xyXG5cclxuICAgICAgICB2YXIgdGFpbCA9IG5ldyBTbmFrZVNlZ21lbnQoe1xyXG4gICAgICAgICAgICBpc1RhaWw6IHRydWUsXHJcbiAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgIHk6IHksXHJcbiAgICAgICAgICAgIGN0eDogbWUuY3R4XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGJvZHkgPSBuZXcgU25ha2VTZWdtZW50KHtcclxuICAgICAgICAgICAgeDogdGFpbC54ICsgU0VHTUVOVF9TSVpFLFxyXG4gICAgICAgICAgICB5OiB0YWlsLnksXHJcbiAgICAgICAgICAgIGN0eDogbWUuY3R4XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGhlYWQgPSBuZXcgU25ha2VTZWdtZW50KHtcclxuICAgICAgICAgICAgaXNIZWFkOiB0cnVlLFxyXG4gICAgICAgICAgICB4OiBib2R5LnggKyBTRUdNRU5UX1NJWkUsXHJcbiAgICAgICAgICAgIHk6IGJvZHkueSxcclxuICAgICAgICAgICAgY29sb3VyOiAncmVkJyxcclxuICAgICAgICAgICAgY3R4OiBtZS5jdHhcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGFpbC5uZXh0ID0gYm9keTtcclxuICAgICAgICBib2R5Lm5leHQgPSBoZWFkO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1lLmhlYWQgPSBoZWFkO1xyXG4gICAgICAgIG1lLnRhaWwgPSB0YWlsO1xyXG4gICAgfVxyXG5cclxuICAgIFNuYWtlLnByb3RvdHlwZS5kcmF3QWxsID0gZnVuY3Rpb24gZHJhd0FsbCgpIHtcclxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzZWdtZW50ID0gbWUudGFpbDtcclxuICAgICAgICBzZWdtZW50LmRyYXcoKTtcclxuICAgICAgICB3aGlsZShzZWdtZW50Lm5leHQpIHtcclxuICAgICAgICAgICAgc2VnbWVudCA9IHNlZ21lbnQubmV4dDtcclxuICAgICAgICAgICAgc2VnbWVudC5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBTbmFrZVNlZ21lbnQob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblxyXG4gICAgICAgIG1lLndpZHRoID0gU0VHTUVOVF9TSVpFO1xyXG4gICAgICAgIG1lLmhlaWdodCA9IFNFR01FTlRfU0laRTtcclxuICAgICAgICBtZS5jb2xvdXIgPSBvcHRpb25zLmNvbG91ciB8fCBcImJsYWNrXCI7XHJcbiAgICAgICAgbWUubmV4dCA9IG9wdGlvbnMubmV4dCB8fCBudWxsO1xyXG4gICAgICAgIG1lLnByZXYgPSBvcHRpb25zLnByZXYgfHwgbnVsbDtcclxuICAgICAgICBtZS54ID0gb3B0aW9ucy54O1xyXG4gICAgICAgIG1lLnkgPSBvcHRpb25zLnk7XHJcbiAgICAgICAgbWUuY3R4ID0gb3B0aW9ucy5jdHg7XHJcbiAgICB9XHJcblxyXG4gICAgU25ha2VTZWdtZW50LnByb3RvdHlwZS51cGRhdGVQb3MgPSBmdW5jdGlvbiB1cGRhdGVQb3MoeCwgeSkge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH07ICBcclxuXHJcbiAgICBTbmFrZVNlZ21lbnQucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiBkcmF3KCkge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICAgICAgbWUuY3R4LmZpbGxTdHlsZSA9IG1lLmNvbG91cjtcclxuICAgICAgICBtZS5jdHguZmlsbFJlY3QobWUueCwgbWUueSwgbWUud2lkdGgsIG1lLmhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgU25ha2VTZWdtZW50LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICAgICAgbWUuY3R4LmNsZWFyUmVjdChtZS54LCBtZS55LCBtZS53aWR0aCwgbWUuaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICBTbmFrZVNlZ21lbnQucHJvdG90eXBlLmRyYXdOZXh0ID0gZnVuY3Rpb24gZHJhd05leHQoaGVhZFNlZ21lbnQsIGRpcmVjdGlvbikge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICAgICAgbWUuaXNIZWFkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZyhcIkdPR09HT0dPXCIpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZVNuYWtlRnJvbURpcmVjdGlvbihzbmFrZSwga2V5Y29kZSkge1xyXG4gICAgICAgIHNuYWtlLmhlYWQuY29sb3VyID0gJ2JsYWNrJztcclxuICAgICAgICBzbmFrZS5oZWFkLmRyYXcoKTtcclxuICAgICAgICB2YXIgY3VySGVhZFggPSBzbmFrZS5oZWFkLng7XHJcbiAgICAgICAgdmFyIGN1ckhlYWRZID0gc25ha2UuaGVhZC55O1xyXG4gICAgICAgIHNuYWtlLnRhaWwuY2xlYXIoKTtcclxuICAgICAgICB2YXIgbmV3VGFpbCA9IHNuYWtlLnRhaWwubmV4dDtcclxuICAgICAgICB2YXIgbmV3SGVhZCA9IHNuYWtlLnRhaWxcclxuICAgICAgICBuZXdIZWFkLm5leHQgPSBudWxsO1xyXG4gICAgICAgIHNuYWtlLmhlYWQubmV4dCA9IG5ld0hlYWQ7XHJcbiAgICAgICAgc25ha2UuaGVhZCA9IG5ld0hlYWQ7XHJcbiAgICAgICAgc25ha2UudGFpbCA9IG5ld1RhaWw7XHJcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGRpcktleUxvb2t1cFtrZXljb2RlXTtcclxuICAgICAgICB2YXIgZGlyY3Rpb25VcGRhdGUgPSBkaXJVcGRhdGVMb29rdXBbZGlyZWN0aW9uXTtcclxuICAgICAgICBzbmFrZS5oZWFkLnggPSBjdXJIZWFkWCArIGRpcmN0aW9uVXBkYXRlLng7XHJcbiAgICAgICAgc25ha2UuaGVhZC55ID0gY3VySGVhZFkgKyBkaXJjdGlvblVwZGF0ZS55O1xyXG4gICAgICAgIHNuYWtlLmhlYWQuY29sb3VyID0gJ3JlZCc7XHJcbiAgICAgICAgc25ha2UuaGVhZC5kcmF3KCk7XHJcbiAgICAgICAgc25ha2UuY3VycmVudERpcmVjdGlvbiA9IGRpcmVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICBpZihldmVudC5rZXlDb2RlID09PSA4MSkge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKGdhbWVMb29wKTtcclxuICAgICAgICB9IGVsc2UgaWYoZXZlbnQua2V5Q29kZSA9PSAzNyB8fCBldmVudC5rZXlDb2RlID09IDM5IHx8IGV2ZW50LmtleUNvZGUgPT0gMzggfHwgZXZlbnQua2V5Q29kZSA9PSA0MCkgeyAvL0xFRlRcclxuICAgICAgICAgICAgdmFyIHZhbGlkVXBkYXRlID0gdmFsaWREaXJlY3Rpb25DaGFuZ2UoZXZlbnQua2V5Q29kZSwgc25ha2UuY3VycmVudERpcmVjdGlvbikgJiYgaW5zaWRlV29ybGRCb3VuZHMoZXZlbnQua2V5Q29kZSwgc25ha2UuaGVhZCk7XHJcbiAgICAgICAgICAgIGlmKHZhbGlkVXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTbmFrZUZyb21EaXJlY3Rpb24oc25ha2UsIGV2ZW50LmtleUNvZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIGNhbnZhc0VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW4nKTtcclxuICAgIGNhbnZhc0VsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2JhKDE1OCwgMTY3LCAxODQsIDAuMiknO1xyXG4gICAgY2FudmFzRWwud2lkdGggPSBjYW52YXNXaWR0aDtcclxuICAgIGNhbnZhc0VsLmhlaWdodCA9IGNhbnZhc0hlaWdodDtcclxuICAgIHZhciBjdHggPSBjYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgdmFyIHNuYWtlID0gbmV3IFNuYWtlKHtcclxuICAgICAgICB4OiBjYW52YXNXaWR0aC8yLFxyXG4gICAgICAgIHk6IGNhbnZhc0hlaWdodC8yLFxyXG4gICAgICAgIGN0eDogY3R4XHJcbiAgICB9KTtcclxuXHJcbiAgICBnYW1lTG9vcCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBrZXlDb2RlID0gcmV2ZXJzZURpcktleUxvb2t1cFtzbmFrZS5jdXJyZW50RGlyZWN0aW9uXTtcclxuICAgICAgICB2YXIgdmFsaWRVcGRhdGUgPSBpbnNpZGVXb3JsZEJvdW5kcyhrZXlDb2RlLCBzbmFrZS5oZWFkKTtcclxuICAgICAgICBpZih2YWxpZFVwZGF0ZSkge1xyXG4gICAgICAgICAgICB1cGRhdGVTbmFrZUZyb21EaXJlY3Rpb24oc25ha2UsIGtleUNvZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzbmFrZS5kcmF3QWxsKCk7XHJcbiAgICB9LCAxMDAwIC8gRlBTKTtcclxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ]);