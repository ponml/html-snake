/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("var GameObjects = __webpack_require__(1);\nvar Snake = GameObjects.Snake;\nvar Segment = GameObjects.Segment;\nvar Food = GameObjects.Food;\nvar Grid = GameObjects.Grid;\n\nwindow.onload = function () {\n    const canvasWidth = 720;\n    const canvasHeight = 420;\n\n    var FPS = 60;\n    var gameLoop;\n    var gameRunning = true;\n\n    var dirKeyLookup = {\n        37: 'WEST',\n        38: 'NORTH',\n        39: 'EAST',\n        40: 'SOUTH'\n    };\n\n    var reverseDirKeyLookup = {\n        WEST: 37,\n        NORTH: 38,\n        EAST: 39,\n        SOUTH: 40\n    };\n\n    var unallowedDirLookup = {\n        'WEST': 39,\n        'NORTH': 40,\n        'EAST': 37,\n        'SOUTH': 38\n    };\n\n    var updateHeadByDirection = {\n        NORTH: {\n            y: -1 * Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: Segment.SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: -1 * Segment.SEGMENT_SIZE\n        }\n    };\n\n    var fringeSet = [];\n    var closedSet = [];\n    var nodePath = [];\n\n    function validDirectionChange(keyCode, currentDirection) {\n        var direction = dirKeyLookup[keyCode];\n        if (currentDirection === direction) {\n            return false;\n        }\n        var unallowed = unallowedDirLookup[currentDirection];\n        return keyCode != unallowed;\n    }\n\n    function insideWorldBounds(keyCode, head) {\n        var direction = dirKeyLookup[keyCode];\n        var directionUpdate = updateHeadByDirection[direction];\n        var newX = head.x + directionUpdate.x;\n        var newY = head.y + directionUpdate.y;\n        return newX <= canvasWidth && newX >= 0 && newY <= canvasHeight && newY >= 0;\n    }\n\n    function updateSnakeFromNode(node) {\n        snake.head.colour = 'black';\n        snake.head.draw();\n        var curHeadX = snake.head.x;\n        var curHeadY = snake.head.y;\n        snake.tail.clear();\n        var newTail = snake.tail.next;\n        var newHead = new Segment({\n            x: node.x,\n            y: node.y,\n            ctx: node.ctx,\n            type: \"snake\"\n        });\n\n        newHead.next = null;\n        snake.head.next = newHead;\n        snake.head = newHead;\n        snake.tail = newTail;\n        snake.head.colour = 'red';\n    }\n\n    function updateSnakeFromDirection(snake, keycode) {\n        snake.head.colour = 'black';\n        snake.head.draw();\n        var curHeadX = snake.head.x;\n        var curHeadY = snake.head.y;\n        snake.tail.clear();\n        var newTail = snake.tail.next;\n        var newHead = snake.tail;\n        newHead.next = null;\n        snake.head.next = newHead;\n        snake.head = newHead;\n        snake.tail = newTail;\n        var direction = dirKeyLookup[keycode];\n        var dirctionUpdate = updateHeadByDirection[direction];\n        snake.head.x = curHeadX + dirctionUpdate.x;\n        snake.head.y = curHeadY + dirctionUpdate.y;\n        snake.head.colour = 'red';\n        snake.head.draw();\n        snake.currentDirection = direction;\n    }\n\n    function checkCollisions(snake) {\n\n        var getNewFoodPos = function () {\n            food.setNewPosition();\n            if (snake.cellIsSnake(food.item)) {\n                getNewFoodPos();\n            }\n        };\n\n        if (snake.head.equal(food.item)) {\n            snake.grow();\n            getNewFoodPos();\n            updateScore();\n            return true;\n        }\n\n        // if(snake.head.equal(snake.tail)) {\n        //     resetGame(snake);\n        //     return false;\n        // }\n\n        // var current = snake.tail;\n        // while(current != snake.head) {\n        //     if(snake.head.equal(current)) {\n        //         resetGame(snake);\n        //         return false;\n        //     }\n        //     current = current.next;\n        // }\n        // return true;\n    }\n\n    function search() {\n        fringeSet.forEach(function (node) {\n            node.clear();\n        });\n\n        closedSet.forEach(function (node) {\n            node.colour = \"yellow\";\n            node.clear();\n        });\n        fringeSet = [];\n        closedSet = [];\n        fringeSet.push(snake.head);\n\n        var node = findRoute();\n        if (node.equal(food.item)) {\n            food.item.colour = \"pink\";\n            fringeSet.forEach(function (node) {\n                node.colour = \"orange\";\n                node.draw();\n            });\n\n            closedSet.forEach(function (node) {\n                node.colour = \"yellow\";\n                node.draw();\n            });\n\n            if (node) {\n                nodePath.unshift(node);\n                var curNode = node.parent;\n                while (curNode) {\n                    curNode.draw(\"blue\");\n                    nodePath.unshift(curNode);\n                    curNode = curNode.parent;\n                }\n            }\n        }\n    }\n\n    function addChildrenToFringeSet(parentNode) {\n\n        var northCoords = {\n            x: parentNode.x / Segment.SEGMENT_SIZE,\n            y: (parentNode.y - Segment.SEGMENT_SIZE) / Segment.SEGMENT_SIZE\n        };\n        var southCoords = {\n            x: parentNode.x / Segment.SEGMENT_SIZE,\n            y: (parentNode.y + Segment.SEGMENT_SIZE) / Segment.SEGMENT_SIZE\n        };\n        var westCoords = {\n            x: (parentNode.x - Segment.SEGMENT_SIZE) / Segment.SEGMENT_SIZE,\n            y: parentNode.y / Segment.SEGMENT_SIZE\n        };\n        var eastCoords = {\n            x: (parentNode.x + Segment.SEGMENT_SIZE) / Segment.SEGMENT_SIZE,\n            y: parentNode.y / Segment.SEGMENT_SIZE\n        };\n        var children = [];\n\n        if (parentNode.y - Segment.SEGMENT_SIZE >= 0) {\n            var cellToConsider = grid.cells[northCoords.x][northCoords.y];\n            if (cellToConsider && !snake.cellIsSnake(cellToConsider)) {\n                children.push(cellToConsider);\n            }\n        }\n        if (parentNode.y + Segment.SEGMENT_SIZE < canvasHeight) {\n            var cellToConsider = grid.cells[southCoords.x][southCoords.y];\n            if (cellToConsider && !snake.cellIsSnake(cellToConsider)) {\n                children.push(cellToConsider);\n            }\n        }\n        if (parentNode.x - Segment.SEGMENT_SIZE >= 0) {\n            var cellToConsider = grid.cells[westCoords.x][westCoords.y];\n            if (cellToConsider && !snake.cellIsSnake(cellToConsider)) {\n                children.push(cellToConsider);\n            }\n        }\n        if (parentNode.x + Segment.SEGMENT_SIZE < canvasWidth) {\n            var cellToConsider = grid.cells[eastCoords.x][eastCoords.y];\n            if (cellToConsider && !snake.cellIsSnake(cellToConsider)) {\n                children.push(cellToConsider);\n            }\n        }\n\n        children.forEach(function (child) {\n\n            var found = null;\n            var childIsInClosed = closedSet.some(function (item) {\n                return item.equal(child);\n            });\n            if (!childIsInClosed) {\n                child.d = parentNode.d + distanceFromNodeToNode(parentNode, child);\n                var L2 = distanceFromNodeToNode(child, food.item);\n                child.dPlusL2 = child.d + L2;\n                child.parent = parentNode;\n            }\n            fringeSet.push(child);\n        });\n\n        fringeSet.sort(function (a, b) {\n            return a.dPlusL2 > b.dPlusL2 ? 1 : -1;\n        });\n    }\n\n    //http://mnemstudio.org/path-finding-a-star.htm\n    function findRoute() {\n        if (fringeSet.length === 0) {\n            return snake.head;\n        } else {\n            var node = fringeSet.shift();\n            if (node.equal(food.item)) {\n                return node;\n            } else {\n                var found = null;\n                var nodeIsInClosed = closedSet.some(function (item) {\n                    return item.equal(node);\n                });\n                if (!nodeIsInClosed) {\n                    closedSet.push(node);\n                    addChildrenToFringeSet(node);\n                }\n                return findRoute();\n            }\n        }\n    }\n\n    function distanceFromNodeToNode(node1, node2) {\n        var node1X = node1.x;\n        var node1Y = node1.y;\n\n        var node2X = node2.x;\n        var node2Y = node2.y;\n\n        var dx = node2X - node1X;\n        var dy = node2Y - node1Y;\n        var distance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n        return distance;\n    }\n\n    // document.addEventListener('keydown', function(event) {\n    //     if(event.keyCode === 81) {\n    //         gameRunning = false;\n    //     } else if(event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 38 || event.keyCode == 40) { //LEFT\n    //         var validUpdate = validDirectionChange(event.keyCode, snake.currentDirection) && insideWorldBounds(event.keyCode, snake.head);\n    //         if(validUpdate) {\n    //             updateSnakeFromDirection(snake, event.keyCode);\n    //         }\n    //     } else if(event.keyCode === 32) {\n    //         search();\n    //         var node = findRoute();\n    //         if(node.equal(food.item)) {\n    //             food.item.colour = \"pink\";\n    //             fringeSet.forEach(function(node) {\n    //                 node.colour = \"orange\";\n    //                 //node.draw();\n    //             });\n\n    //             closedSet.forEach(function(node) {\n    //                 node.colour = \"yellow\";\n    //                 //node.draw();\n    //             });\n\n    //             if(node) {\n    //                 nodePath.unshift(node);\n    //                 var curNode = node.parent;\n    //                 while(curNode) {\n    //                     curNode.draw(\"blue\");\n    //                     nodePath.unshift(curNode);\n    //                     curNode = curNode.parent;\n    //                 }\n    //             }\n    //         }\n    //     }\n    // });\n\n\n    /*\r\n                     (_)      \r\n      _ __ ___   __ _ _ _ __  \r\n     | '_ ` _ \\ / _` | | '_ \\ \r\n     | | | | | | (_| | | | | |\r\n     |_| |_| |_|\\__,_|_|_| |_|\r\n    */\n    var canvasEl = document.getElementById('main');\n    canvasEl.style.backgroundColor = 'rgba(158, 167, 184, 0.2)';\n    canvasEl.width = canvasWidth;\n    canvasEl.height = canvasHeight;\n    var ctx = canvasEl.getContext('2d');\n    var g = GameObjects;\n    var snake = new Snake({\n        x: canvasWidth / 2,\n        y: canvasHeight / 2,\n        ctx: ctx\n    });\n\n    var grid = new Grid(ctx, canvasWidth, canvasHeight, Segment.SEGMENT_SIZE);\n    grid.draw();\n    var food = new Food(ctx, canvasWidth, canvasHeight);\n\n    var lastFrameTimeMs = 0; // The last time the loop was run\n    var maxFPS = 31; // The maximum FPS we want to allow\n    snake.currentDirection = 'EAST';\n    snake.drawAll();\n    var currentScore = -1;\n\n    function updateScore(value) {\n        document.getElementById(\"score\").textContent = \"SCORE: \" + ++currentScore;\n    }\n\n    updateScore();\n\n    // function resetGame(snake) {\n    //     snake.clearAll();\n    //     snake.reset();\n    //     food.clear();\n    //     food.setNewPosition();\n    //     currentScore = -1;\n    //     updateScore();           \n    // }\n\n    // function update(direction) {\n    //     direction = direction || snake.currentDirection;\n    //     var keyCode = reverseDirKeyLookup[direction];\n    //     var insideWorld = insideWorldBounds(keyCode, snake.head);\n    //     if(insideWorld) {\n    //         var check = checkCollisions(snake);\n    //         if(check) {\n    //             updateSnakeFromDirection(snake, keyCode);\n    //         }\n    //         checkCollisions(snake);\n    //     } else {\n    //         resetGame(snake);            \n    //     }\n    // }\n\n    function update() {\n        var node = nodePath.shift();\n        if (node) {\n            updateSnakeFromNode(node);\n            checkCollisions(snake);\n        }\n    }\n\n    function draw() {\n        food.draw();\n        snake.drawAll();\n    }\n\n    function gameLoop(timeStamp) {\n        if (gameRunning) {\n            if (timeStamp < lastFrameTimeMs + 1000 / maxFPS) {\n                requestAnimationFrame(gameLoop);\n                return;\n            }\n            lastFrameTimeMs = timeStamp;\n            if (!nodePath.length) {\n                search();\n            }\n            update();\n            draw();\n            requestAnimationFrame(gameLoop);\n        }\n    }\n    requestAnimationFrame(gameLoop);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("function Segment(options) {\n    var me = this;\n\n    me.width = Segment.SEGMENT_SIZE;\n    me.height = Segment.SEGMENT_SIZE;\n    me.colour = options.colour || \"black\";\n    me.next = options.next || null;\n    me.prev = options.prev || null;\n    me.x = options.x;\n    me.y = options.y;\n    me.d = 0;\n    me.dPlusL2 = 0;\n    me.parent = options.parent;\n    me.ctx = options.ctx;\n    me.type = options.type;\n}\n\nSegment.prototype.updatePos = function updatePos(x, y) {\n    this.x = x;\n    this.y = y;\n};\n\nSegment.prototype.draw = function draw(colour) {\n    var me = this;\n    me.ctx.fillStyle = colour || me.colour;\n    me.ctx.fillRect(me.x, me.y, me.width, me.height);\n};\n\nSegment.prototype.clear = function clear() {\n    var me = this;\n    me.ctx.clearRect(me.x, me.y, me.width, me.height);\n    me.ctx.strokeStyle = \"grey\";\n    me.ctx.strokeRect(me.x, me.y, me.width, me.height);\n};\n\nSegment.prototype.equal = function (otherSegment) {\n    var me = this;\n    return me.x == otherSegment.x && me.y == otherSegment.y;\n};\n\nSegment.SEGMENT_SIZE = 10;\n\nfunction Snake(options) {\n    var me = this;\n    me.x = options.x || 0;\n    me.y = options.y || 0;\n\n    me.ctx = options.ctx;\n    me.currentDirection = 'EAST';\n\n    me.reset();\n}\n\nSnake.prototype.reset = function reset() {\n    var me = this;\n\n    me.head = null;\n    me.tail = null;\n\n    var tail = new Segment({\n        x: me.x,\n        y: me.y,\n        ctx: me.ctx,\n        type: \"snake\"\n    });\n    var body = new Segment({\n        x: tail.x + Segment.SEGMENT_SIZE,\n        y: tail.y,\n        ctx: me.ctx,\n        type: \"snake\"\n    });\n    var head = new Segment({\n        x: body.x + Segment.SEGMENT_SIZE,\n        y: body.y,\n        colour: 'red',\n        ctx: me.ctx,\n        type: \"snake\"\n    });\n\n    tail.next = body;\n    body.next = head;\n    head.next = null;\n\n    me.head = head;\n    me.tail = tail;\n\n    me.updateTailByDirection = {\n        NORTH: {\n            y: Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: -1 * Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: -1 * Segment.SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: Segment.SEGMENT_SIZE\n        }\n    };\n};\n\nSnake.prototype.drawAll = function drawAll() {\n    var me = this;\n    var segment = me.tail;\n    segment.draw();\n    while (segment.next) {\n        segment = segment.next;\n        segment.draw();\n    }\n};\n\nSnake.prototype.clearAll = function clearAll() {\n    var me = this;\n    var segment = me.tail;\n    segment.clear();\n    while (segment.next) {\n        segment = segment.next;\n        segment.clear();\n    }\n};\n\nSnake.prototype.grow = function grow() {\n    var me = this;\n    var directionUpdate = me.updateTailByDirection[me.currentDirection];\n\n    var newTail = new Segment({\n        x: me.tail.x + directionUpdate.x,\n        y: me.tail.y + directionUpdate.y,\n        ctx: me.ctx,\n        type: \"snake\"\n    });\n    newTail.next = me.tail;\n    me.tail = newTail;\n};\n\nSnake.prototype.cellIsSnake = function cellIsSnake(cell) {\n    var me = this;\n    var segment = me.tail;\n    var found = false;\n    while (segment) {\n        if (segment.equal(cell)) {\n            found = true;\n            break;\n        }\n        segment = segment.next;\n    }\n    return found;\n};\n\nfunction Food(ctx, canvasWidth, canvasHeight) {\n    var me = this;\n    me.allFoodPositionsLookup = [];\n    var i, j;\n    for (i = 0; i < canvasWidth; i += Segment.SEGMENT_SIZE) {\n        for (j = 0; j < canvasHeight; j += Segment.SEGMENT_SIZE) {\n            me.allFoodPositionsLookup.push({ x: i, y: j });\n        }\n    }\n    var startPosition = me.getRandXY();\n    me.item = new Segment({\n        ctx: ctx,\n        x: startPosition.x,\n        y: startPosition.y,\n        colour: 'green',\n        type: \"food\"\n    });\n}\n\nFood.prototype.getRandXY = function getRandXY() {\n    function getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    var me = this;\n    var min = 0;\n    var max = me.allFoodPositionsLookup.length;\n\n    return me.allFoodPositionsLookup[getRandomInt(min, max)];\n};\n\nFood.prototype.setNewPosition = function setNewPosition() {\n    var me = this;\n    var pos = me.getRandXY();\n    me.item.colour = \"green\";\n    me.item.x = pos.x;\n    me.item.y = pos.y;\n};\n\nFood.prototype.draw = function draw() {\n    this.item.draw();\n};\n\nFood.prototype.clear = function clear() {\n    this.item.clear();\n};\n\nfunction Grid(ctx, width, height, cellSize) {\n    var me = this;\n    me.cells = [];\n    me.ctx = ctx;\n    me.width = width;\n    me.height = height;\n    me.cellSize = cellSize;\n\n    var x, y;\n    for (x = 0; x < width; x += cellSize) {\n        for (y = 0; y < height; y += cellSize) {\n            var index = x / cellSize;\n            var newCell = new Segment({\n                x: x,\n                y: y,\n                width: Segment.SEGMENT_SIZE,\n                height: Segment.SEGMENT_SIZE,\n                ctx: ctx,\n                type: \"grid\"\n            });\n            if (!me.cells[index]) {\n                me.cells[index] = [newCell];\n            } else {\n                me.cells[index].push(newCell);\n            }\n        }\n    }\n}\n\nGrid.prototype.draw = function draw() {\n    var me = this;\n    for (x = 0; x < me.width; x += me.cellSize) {\n        for (y = 0; y < me.height; y += me.cellSize) {\n            var cell = me.cells[x / me.cellSize][y / me.cellSize];\n            me.ctx.strokeStyle = \"grey\";\n            me.ctx.strokeRect(cell.x, cell.y, cell.width, cell.height);\n        }\n    }\n};\n\nmodule.exports = {\n    Food: Food,\n    Snake: Snake,\n    Segment: Segment,\n    Grid: Grid\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);