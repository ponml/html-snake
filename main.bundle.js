/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("var GameObjects = __webpack_require__(1);\nvar Snake = GameObjects.Snake;\nvar Segment = GameObjects.Segment;\nvar Food = GameObjects.Food;\nvar Cell = GameObjects.Cell;\nvar Grid = GameObjects.Grid;\n\nwindow.onload = function () {\n    const canvasWidth = 1520;\n    const canvasHeight = 920;\n\n    var FPS = 60;\n    var gameLoop;\n    var gameRunning = true;\n\n    var dirKeyLookup = {\n        37: 'WEST',\n        38: 'NORTH',\n        39: 'EAST',\n        40: 'SOUTH'\n    };\n\n    var reverseDirKeyLookup = {\n        WEST: 37,\n        NORTH: 38,\n        EAST: 39,\n        SOUTH: 40\n    };\n\n    var unallowedDirLookup = {\n        'WEST': 39,\n        'NORTH': 40,\n        'EAST': 37,\n        'SOUTH': 38\n    };\n\n    var updateHeadByDirection = {\n        NORTH: {\n            y: -1 * Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: Segment.SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: -1 * Segment.SEGMENT_SIZE\n        }\n    };\n\n    function validDirectionChange(keyCode, currentDirection) {\n        var direction = dirKeyLookup[keyCode];\n        if (currentDirection === direction) {\n            return false;\n        }\n        var unallowed = unallowedDirLookup[currentDirection];\n        return keyCode != unallowed;\n    }\n\n    function insideWorldBounds(keyCode, head) {\n        var direction = dirKeyLookup[keyCode];\n        var directionUpdate = updateHeadByDirection[direction];\n        var newX = head.x + directionUpdate.x;\n        var newY = head.y + directionUpdate.y;\n        return newX <= canvasWidth && newX >= 0 && newY <= canvasHeight && newY >= 0;\n    }\n\n    function updateSnakeFromDirection(snake, keycode) {\n        snake.head.colour = 'black';\n        var curHeadX = snake.head.x;\n        var curHeadY = snake.head.y;\n        snake.tail.clear();\n        var newTail = snake.tail.next;\n        var newHead = snake.tail;\n        newHead.next = null;\n        snake.head.next = newHead;\n        snake.head = newHead;\n        snake.tail = newTail;\n        var direction = dirKeyLookup[keycode];\n        var dirctionUpdate = updateHeadByDirection[direction];\n        snake.head.x = curHeadX + dirctionUpdate.x;\n        snake.head.y = curHeadY + dirctionUpdate.y;\n        snake.head.colour = 'red';\n        snake.currentDirection = direction;\n    }\n\n    function checkCollisions(snake) {\n        if (snake.head.equal(food.item)) {\n            snake.grow();\n            food.setNewPosition();\n            updateScore();\n            return true;\n        }\n\n        if (snake.head.equal(snake.tail)) {\n            resetGame(snake);\n            return false;\n        }\n\n        var current = snake.tail;\n        while (current != snake.head) {\n            if (snake.head.equal(current)) {\n                resetGame(snake);\n                return false;\n            }\n            current = current.next;\n        }\n        return true;\n    }\n\n    document.addEventListener('keydown', function (event) {\n        if (event.keyCode === 81) {\n            gameRunning = false;\n        } else if (event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 38 || event.keyCode == 40) {\n            //LEFT\n            var validUpdate = validDirectionChange(event.keyCode, snake.currentDirection) && insideWorldBounds(event.keyCode, snake.head);\n            if (validUpdate) {\n                updateSnakeFromDirection(snake, event.keyCode);\n            }\n        }\n    });\n\n    /*\r\n                     (_)      \r\n      _ __ ___   __ _ _ _ __  \r\n     | '_ ` _ \\ / _` | | '_ \\ \r\n     | | | | | | (_| | | | | |\r\n     |_| |_| |_|\\__,_|_|_| |_|\r\n    */\n    var canvasEl = document.getElementById('main');\n    canvasEl.style.backgroundColor = 'rgba(158, 167, 184, 0.2)';\n    canvasEl.width = canvasWidth;\n    canvasEl.height = canvasHeight;\n    var ctx = canvasEl.getContext('2d');\n    var g = GameObjects;\n    var snake = new Snake({\n        x: canvasWidth / 2,\n        y: canvasHeight / 2,\n        ctx: ctx\n    });\n\n    var grid = new Grid(ctx, canvasWidth, canvasHeight, Segment.SEGMENT_SIZE);\n    grid.draw();\n    var food = new Food(ctx, canvasWidth, canvasHeight);\n\n    var lastFrameTimeMs = 0; // The last time the loop was run\n    var maxFPS = 31; // The maximum FPS we want to allow\n    snake.currentDirection = 'EAST';\n    snake.drawAll();\n    var currentScore = -1;\n\n    function updateScore(value) {\n        document.getElementById(\"score\").textContent = \"SCORE: \" + ++currentScore;\n    }\n\n    updateScore();\n\n    function resetGame(snake) {\n        snake.clearAll();\n        snake.reset();\n        food.clear();\n        food.setNewPosition();\n        currentScore = -1;\n        updateScore();\n    }\n\n    function update() {\n        var keyCode = reverseDirKeyLookup[snake.currentDirection];\n        var insideWorld = insideWorldBounds(keyCode, snake.head);\n        if (insideWorld) {\n            var check = checkCollisions(snake);\n            if (check) {\n                updateSnakeFromDirection(snake, keyCode);\n            }\n            checkCollisions(snake);\n        } else {\n            resetGame(snake);\n        }\n    }\n\n    function draw() {\n        food.draw();\n        snake.drawAll();\n    }\n\n    function gameLoop(timeStamp) {\n        if (gameRunning) {\n            if (timeStamp < lastFrameTimeMs + 1000 / maxFPS) {\n                requestAnimationFrame(gameLoop);\n                return;\n            }\n            lastFrameTimeMs = timeStamp;\n            update();\n            draw();\n            requestAnimationFrame(gameLoop);\n        }\n    }\n    requestAnimationFrame(gameLoop);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("function Segment(options) {\n    var me = this;\n\n    me.width = Segment.SEGMENT_SIZE;\n    me.height = Segment.SEGMENT_SIZE;\n    me.colour = options.colour || \"black\";\n    me.next = options.next || null;\n    me.prev = options.prev || null;\n    me.x = options.x;\n    me.y = options.y;\n    me.ctx = options.ctx;\n}\n\nSegment.prototype.updatePos = function updatePos(x, y) {\n    this.x = x;\n    this.y = y;\n};\n\nSegment.prototype.draw = function draw() {\n    var me = this;\n    me.ctx.fillStyle = me.colour;\n    me.ctx.fillRect(me.x, me.y, me.width, me.height);\n};\n\nSegment.prototype.clear = function clear() {\n    var me = this;\n    me.ctx.clearRect(me.x, me.y, me.width, me.height);\n    me.ctx.strokeStyle = \"grey\";\n    me.ctx.strokeRect(me.x, me.y, me.width, me.height);\n};\n\nSegment.prototype.equal = function (otherSegment) {\n    var me = this;\n    if (me.x == otherSegment.x && me.y == otherSegment.y) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nSegment.SEGMENT_SIZE = 20;\n\nfunction Snake(options) {\n    var me = this;\n    me.x = options.x || 0;\n    me.y = options.y || 0;\n\n    me.ctx = options.ctx;\n    me.currentDirection = 'EAST';\n\n    me.reset();\n}\n\nSnake.prototype.reset = function reset() {\n    var me = this;\n\n    me.head = null;\n    me.tail = null;\n\n    var tail = new Segment({\n        x: me.x,\n        y: me.y,\n        ctx: me.ctx\n    });\n    var body = new Segment({\n        x: tail.x + Segment.SEGMENT_SIZE,\n        y: tail.y,\n        ctx: me.ctx\n    });\n    var head = new Segment({\n        x: body.x + Segment.SEGMENT_SIZE,\n        y: body.y,\n        colour: 'red',\n        ctx: me.ctx\n    });\n\n    tail.next = body;\n    body.next = head;\n    head.next = null;\n\n    me.head = head;\n    me.tail = tail;\n\n    me.updateTailByDirection = {\n        NORTH: {\n            y: Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: -1 * Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: -1 * Segment.SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: Segment.SEGMENT_SIZE\n        }\n    };\n};\n\nSnake.prototype.drawAll = function drawAll() {\n    var me = this;\n    var segment = me.tail;\n    segment.draw();\n    while (segment.next) {\n        segment = segment.next;\n        segment.draw();\n    }\n};\n\nSnake.prototype.clearAll = function clearAll() {\n    var me = this;\n    var segment = me.tail;\n    segment.clear();\n    while (segment.next) {\n        segment = segment.next;\n        segment.clear();\n    }\n};\n\nSnake.prototype.grow = function grow() {\n    var me = this;\n    var directionUpdate = me.updateTailByDirection[me.currentDirection];\n\n    var newTail = new Segment({\n        x: me.tail.x + directionUpdate.x,\n        y: me.tail.y + directionUpdate.y,\n        ctx: me.ctx\n    });\n    newTail.next = me.tail;\n    me.tail = newTail;\n};\n\nfunction Food(ctx, canvasWidth, canvasHeight) {\n    var me = this;\n    me.allFoodPositionsLookup = [];\n    var i, j;\n    for (i = 0; i < canvasWidth; i += Segment.SEGMENT_SIZE) {\n        for (j = 0; j < canvasHeight; j += Segment.SEGMENT_SIZE) {\n            me.allFoodPositionsLookup.push({ x: i, y: j });\n        }\n    }\n    var startPosition = me.getRandXY();\n    me.item = new Segment({\n        ctx: ctx,\n        x: startPosition.x,\n        y: startPosition.y,\n        colour: 'green'\n    });\n}\n\nFood.prototype.getRandXY = function getRandXY() {\n    function getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    var me = this;\n    var min = 0;\n    var max = me.allFoodPositionsLookup.length;\n\n    return me.allFoodPositionsLookup[getRandomInt(min, max)];\n};\n\nFood.prototype.setNewPosition = function setNewPosition() {\n    var me = this;\n    var pos = me.getRandXY();\n    me.item.x = pos.x;\n    me.item.y = pos.y;\n};\n\nFood.prototype.draw = function draw() {\n    this.item.draw();\n};\n\nFood.prototype.clear = function clear() {\n    this.item.clear();\n};\n\nfunction Cell(x, y) {\n    var me = this;\n    me.x = x;\n    me.y = y;\n    me.width = Segment.SEGMENT_SIZE;\n    me.height = Segment.SEGMENT_SIZE;\n}\n\nfunction Grid(ctx, width, height, cellSize) {\n    var me = this;\n    me.cells = [];\n    me.ctx = ctx;\n    me.width = width;\n    me.height = height;\n    me.cellSize = cellSize;\n\n    var x, y;\n    for (x = 0; x < width; x += cellSize) {\n        for (y = 0; y < height; y += cellSize) {\n            var index = x / cellSize;\n            var newCell = new Cell(x, y);\n            if (!me.cells[index]) {\n                me.cells[index] = [newCell];\n            } else {\n                me.cells[index].push(newCell);\n            }\n        }\n    }\n}\n\nGrid.prototype.draw = function draw() {\n    var me = this;\n    for (x = 0; x < me.width; x += me.cellSize) {\n        for (y = 0; y < me.height; y += me.cellSize) {\n            var cell = me.cells[x / me.cellSize][y / me.cellSize];\n            me.ctx.strokeStyle = \"grey\";\n            me.ctx.strokeRect(cell.x, cell.y, cell.width, cell.height);\n        }\n    }\n};\n\nmodule.exports = {\n    Food: Food,\n    Snake: Snake,\n    Segment: Segment,\n    Grid: Grid,\n    Cell: Cell\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL3NuYWtlLmpzP2FlZTMiXSwibmFtZXMiOlsiU2VnbWVudCIsIm9wdGlvbnMiLCJtZSIsIndpZHRoIiwiU0VHTUVOVF9TSVpFIiwiaGVpZ2h0IiwiY29sb3VyIiwibmV4dCIsInByZXYiLCJ4IiwieSIsImN0eCIsInByb3RvdHlwZSIsInVwZGF0ZVBvcyIsImRyYXciLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImNsZWFyIiwiY2xlYXJSZWN0Iiwic3Ryb2tlU3R5bGUiLCJzdHJva2VSZWN0IiwiZXF1YWwiLCJvdGhlclNlZ21lbnQiLCJTbmFrZSIsImN1cnJlbnREaXJlY3Rpb24iLCJyZXNldCIsImhlYWQiLCJ0YWlsIiwiYm9keSIsInVwZGF0ZVRhaWxCeURpcmVjdGlvbiIsIk5PUlRIIiwiU09VVEgiLCJFQVNUIiwiV0VTVCIsImRyYXdBbGwiLCJzZWdtZW50IiwiY2xlYXJBbGwiLCJncm93IiwiZGlyZWN0aW9uVXBkYXRlIiwibmV3VGFpbCIsIkZvb2QiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImFsbEZvb2RQb3NpdGlvbnNMb29rdXAiLCJpIiwiaiIsInB1c2giLCJzdGFydFBvc2l0aW9uIiwiZ2V0UmFuZFhZIiwiaXRlbSIsImdldFJhbmRvbUludCIsIm1pbiIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsInNldE5ld1Bvc2l0aW9uIiwicG9zIiwiQ2VsbCIsIkdyaWQiLCJjZWxsU2l6ZSIsImNlbGxzIiwiaW5kZXgiLCJuZXdDZWxsIiwiY2VsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLE9BQVQsQ0FBaUJDLE9BQWpCLEVBQTBCO0FBQ3RCLFFBQUlDLEtBQUssSUFBVDs7QUFFQUEsT0FBR0MsS0FBSCxHQUFXSCxRQUFRSSxZQUFuQjtBQUNBRixPQUFHRyxNQUFILEdBQVlMLFFBQVFJLFlBQXBCO0FBQ0FGLE9BQUdJLE1BQUgsR0FBWUws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T0FBRCxDQUFsQjtBQUNILGFBRkQsTUFFTztBQUNIOUQsbUJBQUc0RCxLQUFILENBQVNDLEtBQVQsRUFBZ0JqQixJQUFoQixDQUFxQmtCLE9BQXJCO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7O0FBRURKLEtBQUtoRCxTQUFMLENBQWVFLElBQWYsR0FBc0IsU0FBU0EsSUFBVCxHQUFnQjtBQUNsQyxRQUFJWixLQUFLLElBQVQ7QUFDQSxTQUFJTyxJQUFJLENBQVIsRUFBV0EsSUFBSVAsR0FBR0MsS0FBbEIsRUFBMEJNLEtBQUtQLEdBQUcyRCxRQUFsQyxFQUE0QztBQUN4QyxhQUFJbkQsSUFBSSxDQUFSLEVBQVlBLElBQUlSLEdBQUdHLE1BQW5CLEVBQTJCSyxLQUFLUixHQUFHMkQsUUFBbkMsRUFBNkM7QUFDekMsZ0JBQUlJLE9BQU8vRCxHQUFHNEQsS0FBSCxDQUFTckQsSUFBRVAsR0FBRzJELFFBQWQsRUFBd0JuRCxJQUFFUixHQUFHMkQsUUFBN0IsQ0FBWDtBQUNBM0QsZUFBR1MsR0FBSCxDQUFPUSxXQUFQLEdBQW1CLE1BQW5CO0FBQ0FqQixlQUFHUyxHQUFILENBQU9TLFVBQVAsQ0FBa0I2QyxLQUFLeEQsQ0FBdkIsRUFBMEJ3RCxLQUFLdkQsQ0FBL0IsRUFBa0N1RCxLQUFLOUQsS0FBdkMsRUFBOEM4RCxLQUFLNUQsTUFBbkQ7QUFDSDtBQUNKO0FBRUosQ0FWRDs7QUFhQTZELE9BQU9DLE9BQVAsR0FBaUI7QUFDYjNCLFVBQU1BLElBRE87QUFFYmpCLFdBQU9BLEtBRk07QUFHYnZCLGFBQVNBLE9BSEk7QUFJYjRELFVBQU1BLElBSk87QUFLYkQsVUFBTUE7QUFMTyxDQUFqQiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gU2VnbWVudChvcHRpb25zKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG5cclxuICAgIG1lLndpZHRoID0gU2VnbWVudC5TRUdNRU5UX1NJWkU7XHJcbiAgICBtZS5oZWlnaHQgPSBTZWdtZW50LlNFR01FTlRfU0laRTtcclxuICAgIG1lLmNvbG91ciA9IG9wdGlvbnMuY29sb3VyIHx8IFwiYmxhY2tcIjtcclxuICAgIG1lLm5leHQgPSBvcHRpb25zLm5leHQgfHwgbnVsbDtcclxuICAgIG1lLnByZXYgPSBvcHRpb25zLnByZXYgfHwgbnVsbDtcclxuICAgIG1lLnggPSBvcHRpb25zLng7XHJcbiAgICBtZS55ID0gb3B0aW9ucy55O1xyXG4gICAgbWUuY3R4ID0gb3B0aW9ucy5jdHg7XHJcbn1cclxuXHJcblNlZ21lbnQucHJvdG90eXBlLnVwZGF0ZVBvcyA9IGZ1bmN0aW9uIHVwZGF0ZVBvcyh4LCB5KSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxufTsgIFxyXG5cclxuU2VnbWVudC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgbWUuY3R4LmZpbGxTdHlsZSA9IG1lLmNvbG91cjtcclxuICAgIG1lLmN0eC5maWxsUmVjdChtZS54LCBtZS55LCBtZS53aWR0aCwgbWUuaGVpZ2h0KTtcclxufTtcclxuXHJcblNlZ21lbnQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgbWUuY3R4LmNsZWFyUmVjdChtZS54LCBtZS55LCBtZS53aWR0aCwgbWUuaGVpZ2h0KTtcclxuICAgIG1lLmN0eC5zdHJva2VTdHlsZT1cImdyZXlcIjtcclxuICAgIG1lLmN0eC5zdHJva2VSZWN0KG1lLngsIG1lLnksIG1lLndpZHRoLCBtZS5oZWlnaHQpO1xyXG59O1xyXG5cclxuU2VnbWVudC5wcm90b3R5cGUuZXF1YWwgPSBmdW5jdGlvbihvdGhlclNlZ21lbnQpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICBpZihtZS54ID09IG90aGVyU2VnbWVudC54ICYmIG1lLnkgPT0gb3RoZXJTZWdtZW50LnkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59O1xyXG5cclxuU2VnbWVudC5TRUdNRU5UX1NJWkUgPSAyMDtcclxuXHJcbmZ1bmN0aW9uIFNuYWtlKG9wdGlvbnMpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7ICAgXHJcbiAgICBtZS54ID0gb3B0aW9ucy54IHx8IDA7XHJcbiAgICBtZS55ID0gb3B0aW9ucy55IHx8IDA7XHJcblxyXG4gICAgbWUuY3R4ID0gb3B0aW9ucy5jdHg7XHJcbiAgICBtZS5jdXJyZW50RGlyZWN0aW9uID0gJ0VBU1QnO1xyXG5cclxuICAgIG1lLnJlc2V0KCk7XHJcbn1cclxuXHJcblNuYWtlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xyXG4gICAgdmFyIG1lID0gdGhpcztcclxuICAgIFxyXG4gICAgbWUuaGVhZCA9IG51bGw7XHJcbiAgICBtZS50YWlsID0gbnVsbDtcclxuXHJcbiAgICB2YXIgdGFpbCA9IG5ldyBTZWdtZW50KHtcclxuICAgICAgICB4OiBtZS54LFxyXG4gICAgICAgIHk6IG1lLnksXHJcbiAgICAgICAgY3R4OiBtZS5jdHhcclxuICAgIH0pO1xyXG4gICAgdmFyIGJvZHkgPSBuZXcgU2VnbWVudCh7XHJcbiAgICAgICAgeDogdGFpbC54ICsgU2VnbWVudC5TRUdNRU5UX1NJWkUsXHJcbiAgICAgICAgeTogdGFpbC55LFxyXG4gICAgICAgIGN0eDogbWUuY3R4XHJcbiAgICB9KTtcclxuICAgIHZhciBoZWFkID0gbmV3IFNlZ21lbnQoe1xyXG4gICAgICAgIHg6IGJvZHkueCArIFNlZ21lbnQuU0VHTUVOVF9TSVpFLFxyXG4gICAgICAgIHk6IGJvZHkueSxcclxuICAgICAgICBjb2xvdXI6ICdyZWQnLFxyXG4gICAgICAgIGN0eDogbWUuY3R4XHJcbiAgICB9KTtcclxuXHJcbiAgICB0YWlsLm5leHQgPSBib2R5O1xyXG4gICAgYm9keS5uZXh0ID0gaGVhZDtcclxuICAgIGhlYWQubmV4dCA9IG51bGw7XHJcblxyXG4gICAgbWUuaGVhZCA9IGhlYWQ7XHJcbiAgICBtZS50YWlsID0gdGFpbDtcclxuXHJcbiAgICBtZS51cGRhdGVUYWlsQnlEaXJlY3Rpb24gPSB7XHJcbiAgICAgICAgTk9SVEg6IHtcclxuICAgICAgICAgICAgeTogU2VnbWVudC5TRUdNRU5UX1NJWkUsXHJcbiAgICAgICAgICAgIHg6IDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFNPVVRIOiB7XHJcbiAgICAgICAgICAgIHk6IC0xICogU2VnbWVudC5TRUdNRU5UX1NJWkUsXHJcbiAgICAgICAgICAgIHg6IDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIEVBU1Q6IHtcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgeDogLTEgKiBTZWdtZW50LlNFR01FTlRfU0laRVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgV0VTVDoge1xyXG4gICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICB4OiBTZWdtZW50LlNFR01FTlRfU0laRVxyXG4gICAgICAgIH0sICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICB9O1xyXG5cclxufTtcclxuXHJcblNuYWtlLnByb3RvdHlwZS5kcmF3QWxsID0gZnVuY3Rpb24gZHJhd0FsbCgpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICB2YXIgc2VnbWVudCA9IG1lLnRhaWw7XHJcbiAgICBzZWdtZW50LmRyYXcoKTtcclxuICAgIHdoaWxlKHNlZ21lbnQubmV4dCkge1xyXG4gICAgICAgIHNlZ21lbnQgPSBzZWdtZW50Lm5leHQ7XHJcbiAgICAgICAgc2VnbWVudC5kcmF3KCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5TbmFrZS5wcm90b3R5cGUuY2xlYXJBbGwgPSBmdW5jdGlvbiBjbGVhckFsbCgpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICB2YXIgc2VnbWVudCA9IG1lLnRhaWw7XHJcbiAgICBzZWdtZW50LmNsZWFyKCk7XHJcbiAgICB3aGlsZShzZWdtZW50Lm5leHQpIHtcclxuICAgICAgICBzZWdtZW50ID0gc2VnbWVudC5uZXh0O1xyXG4gICAgICAgIHNlZ21lbnQuY2xlYXIoKTtcclxuICAgIH1cclxufTtcclxuXHJcblNuYWtlLnByb3RvdHlwZS5ncm93ID0gZnVuY3Rpb24gZ3JvdygpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICB2YXIgZGlyZWN0aW9uVXBkYXRlID0gbWUudXBkYXRlVGFpbEJ5RGlyZWN0aW9uW21lLmN1cnJlbnREaXJlY3Rpb25dO1xyXG5cclxuICAgIHZhciBuZXdUYWlsID0gbmV3IFNlZ21lbnQoe1xyXG4gICAgICAgIHg6IG1lLnRhaWwueCArIGRpcmVjdGlvblVwZGF0ZS54LFxyXG4gICAgICAgIHk6IG1lLnRhaWwueSArIGRpcmVjdGlvblVwZGF0ZS55LFxyXG4gICAgICAgIGN0eDogbWUuY3R4XHJcbiAgICB9KTtcclxuICAgIG5ld1RhaWwubmV4dCA9IG1lLnRhaWw7XHJcbiAgICBtZS50YWlsID0gbmV3VGFpbDtcclxufTtcclxuXHJcbmZ1bmN0aW9uIEZvb2QoY3R4LCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgbWUuYWxsRm9vZFBvc2l0aW9uc0xvb2t1cCA9IFtdO1xyXG4gICAgdmFyIGksajtcclxuICAgIGZvcihpID0gMCA7IGkgPCBjYW52YXNXaWR0aCA7IGkgKz0gU2VnbWVudC5TRUdNRU5UX1NJWkUpIHtcclxuICAgICAgICBmb3IoaiA9IDA7IGogPCBjYW52YXNIZWlnaHQgOyBqICs9IFNlZ21lbnQuU0VHTUVOVF9TSVpFKSB7XHJcbiAgICAgICAgICAgIG1lLmFsbEZvb2RQb3NpdGlvbnNMb29rdXAucHVzaCh7IHg6IGksIHk6IGogfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIHN0YXJ0UG9zaXRpb24gPSBtZS5nZXRSYW5kWFkoKTtcclxuICAgIG1lLml0ZW0gPSBuZXcgU2VnbWVudCh7XHJcbiAgICAgICAgY3R4OiBjdHgsXHJcbiAgICAgICAgeDogc3RhcnRQb3NpdGlvbi54LFxyXG4gICAgICAgIHk6IHN0YXJ0UG9zaXRpb24ueSxcclxuICAgICAgICBjb2xvdXI6ICdncmVlbidcclxuICAgIH0pO1xyXG59XHJcblxyXG5Gb29kLnByb3RvdHlwZS5nZXRSYW5kWFkgPSBmdW5jdGlvbiBnZXRSYW5kWFkoKSB7XHJcbiAgICBmdW5jdGlvbiBnZXRSYW5kb21JbnQobWluLCBtYXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XHJcbiAgICB9XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgdmFyIG1pbiA9IDA7XHJcbiAgICB2YXIgbWF4ID0gbWUuYWxsRm9vZFBvc2l0aW9uc0xvb2t1cC5sZW5ndGg7XHJcbiAgICBcclxuICAgIHJldHVybiBtZS5hbGxGb29kUG9zaXRpb25zTG9va3VwW2dldFJhbmRvbUludChtaW4sIG1heCldO1xyXG59O1xyXG5cclxuRm9vZC5wcm90b3R5cGUuc2V0TmV3UG9zaXRpb24gPSBmdW5jdGlvbiBzZXROZXdQb3NpdGlvbigpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICB2YXIgcG9zID0gbWUuZ2V0UmFuZFhZKCk7XHJcbiAgICBtZS5pdGVtLnggPSBwb3MueDtcclxuICAgIG1lLml0ZW0ueSA9IHBvcy55OyAgIFxyXG59O1xyXG5cclxuRm9vZC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICB0aGlzLml0ZW0uZHJhdygpO1xyXG59XHJcblxyXG5Gb29kLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xyXG4gICAgdGhpcy5pdGVtLmNsZWFyKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIENlbGwoeCx5KSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgbWUueCA9IHg7XHJcbiAgICBtZS55ID0geTtcclxuICAgIG1lLndpZHRoID0gU2VnbWVudC5TRUdNRU5UX1NJWkU7XHJcbiAgICBtZS5oZWlnaHQgPSBTZWdtZW50LlNFR01FTlRfU0laRTtcclxufVxyXG5cclxuZnVuY3Rpb24gR3JpZChjdHgsIHdpZHRoLCBoZWlnaHQsIGNlbGxTaXplKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgbWUuY2VsbHMgPSBbXTtcclxuICAgIG1lLmN0eCA9IGN0eDtcclxuICAgIG1lLndpZHRoID0gd2lkdGg7XHJcbiAgICBtZS5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICBtZS5jZWxsU2l6ZSA9IGNlbGxTaXplO1xyXG5cclxuICAgIHZhciB4LHk7XHJcbiAgICBmb3IoeCA9IDA7IHggPCB3aWR0aCA7IHggKz0gY2VsbFNpemUpIHtcclxuICAgICAgICBmb3IoeSA9IDAgOyB5IDwgaGVpZ2h0OyB5ICs9IGNlbGxTaXplKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHgvY2VsbFNpemU7XHJcbiAgICAgICAgICAgIHZhciBuZXdDZWxsID0gbmV3IENlbGwoeCwgeSk7XHJcbiAgICAgICAgICAgIGlmKCFtZS5jZWxsc1tpbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIG1lLmNlbGxzW2luZGV4XSA9IFtuZXdDZWxsXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1lLmNlbGxzW2luZGV4XS5wdXNoKG5ld0NlbGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5HcmlkLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gZHJhdygpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICBmb3IoeCA9IDA7IHggPCBtZS53aWR0aCA7IHggKz0gbWUuY2VsbFNpemUpIHtcclxuICAgICAgICBmb3IoeSA9IDAgOyB5IDwgbWUuaGVpZ2h0OyB5ICs9IG1lLmNlbGxTaXplKSB7XHJcbiAgICAgICAgICAgIHZhciBjZWxsID0gbWUuY2VsbHNbeC9tZS5jZWxsU2l6ZV1beS9tZS5jZWxsU2l6ZV07XHJcbiAgICAgICAgICAgIG1lLmN0eC5zdHJva2VTdHlsZT1cImdyZXlcIjtcclxuICAgICAgICAgICAgbWUuY3R4LnN0cm9rZVJlY3QoY2VsbC54LCBjZWxsLnksIGNlbGwud2lkdGgsIGNlbGwuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICB9ICAgIFxyXG4gICAgXHJcbn1cclxuICAgIFxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBGb29kOiBGb29kLFxyXG4gICAgU25ha2U6IFNuYWtlLFxyXG4gICAgU2VnbWVudDogU2VnbWVudCxcclxuICAgIEdyaWQ6IEdyaWQsXHJcbiAgICBDZWxsOiBDZWxsXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NjcmlwdHMvc25ha2UuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ]);