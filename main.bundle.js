/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	eval("window.onload = function () {\n    const canvasWidth = 1520;\n    const canvasHeight = 920;\n    var SEGMENT_SIZE = 20;\n    var FPS = 60;\n    var gameLoop;\n    var gameRunning = true;\n\n    var dirKeyLookup = {\n        37: 'WEST',\n        38: 'NORTH',\n        39: 'EAST',\n        40: 'SOUTH'\n    };\n\n    var reverseDirKeyLookup = {\n        WEST: 37,\n        NORTH: 38,\n        EAST: 39,\n        SOUTH: 40\n    };\n\n    var unallowedDirLookup = {\n        'WEST': 39,\n        'NORTH': 40,\n        'EAST': 37,\n        'SOUTH': 38\n    };\n\n    var updateHeadByDirection = {\n        NORTH: {\n            y: -1 * SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: -1 * SEGMENT_SIZE\n        }\n    };\n\n    var updateTailByDirection = {\n        NORTH: {\n            y: SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: -1 * SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: -1 * SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: SEGMENT_SIZE\n        }\n    };\n\n    function validDirectionChange(keyCode, currentDirection) {\n        var direction = dirKeyLookup[keyCode];\n        if (currentDirection === direction) {\n            return false;\n        }\n        var unallowed = unallowedDirLookup[currentDirection];\n        return keyCode != unallowed;\n    }\n\n    function insideWorldBounds(keyCode, head) {\n        var direction = dirKeyLookup[keyCode];\n        var directionUpdate = updateHeadByDirection[direction];\n        var newX = head.x + directionUpdate.x;\n        var newY = head.y + directionUpdate.y;\n        return newX <= canvasWidth && newX >= 0 && newY <= canvasHeight && newY >= 0;\n    }\n\n    function Snake(options) {\n        var me = this;\n        me.x = options.x || 0;\n        me.y = options.y || 0;\n\n        me.ctx = options.ctx;\n        me.currentDirection = 'EAST';\n\n        me.reset();\n    }\n\n    Snake.prototype.reset = function reset() {\n        var me = this;\n\n        me.head = null;\n        me.tail = null;\n\n        var tail = new SnakeSegment({\n            x: me.x,\n            y: me.y,\n            ctx: me.ctx\n        });\n        var body = new SnakeSegment({\n            x: tail.x + SEGMENT_SIZE,\n            y: tail.y,\n            ctx: me.ctx\n        });\n        var head = new SnakeSegment({\n            x: body.x + SEGMENT_SIZE,\n            y: body.y,\n            colour: 'red',\n            ctx: me.ctx\n        });\n\n        tail.next = body;\n        body.next = head;\n        head.next = null;\n\n        me.head = head;\n        me.tail = tail;\n    };\n\n    Snake.prototype.drawAll = function drawAll() {\n        var me = this;\n        var segment = me.tail;\n        segment.draw();\n        while (segment.next) {\n            segment = segment.next;\n            segment.draw();\n        }\n    };\n\n    Snake.prototype.clearAll = function clearAll() {\n        var me = this;\n        var segment = me.tail;\n        segment.clear();\n        while (segment.next) {\n            segment = segment.next;\n            segment.clear();\n        }\n    };\n\n    Snake.prototype.grow = function grow() {\n        var me = this;\n        var directionUpdate = updateTailByDirection[me.currentDirection];\n\n        var newTail = new SnakeSegment({\n            x: me.tail.x + directionUpdate.x,\n            y: me.tail.y + directionUpdate.y,\n            ctx: me.ctx\n        });\n        newTail.next = me.tail;\n        me.tail = newTail;\n    };\n\n    function SnakeSegment(options) {\n        var me = this;\n\n        me.width = SEGMENT_SIZE;\n        me.height = SEGMENT_SIZE;\n        me.colour = options.colour || \"black\";\n        me.next = options.next || null;\n        me.prev = options.prev || null;\n        me.x = options.x;\n        me.y = options.y;\n        me.ctx = options.ctx;\n    }\n\n    SnakeSegment.prototype.updatePos = function updatePos(x, y) {\n        this.x = x;\n        this.y = y;\n    };\n\n    SnakeSegment.prototype.draw = function draw() {\n        var me = this;\n        me.ctx.fillStyle = me.colour;\n        me.ctx.fillRect(me.x, me.y, me.width, me.height);\n    };\n\n    SnakeSegment.prototype.clear = function clear() {\n        var me = this;\n        me.ctx.clearRect(me.x, me.y, me.width, me.height);\n    };\n\n    SnakeSegment.prototype.equal = function (otherSegment) {\n        var me = this;\n        if (me.x == otherSegment.x && me.y == otherSegment.y) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    function Food(ctx) {\n        var me = this;\n        me.allFoodPositionsLookup = [];\n        var i, j;\n        for (i = 0; i < canvasWidth; i += SEGMENT_SIZE) {\n            for (j = 0; j < canvasHeight; j += SEGMENT_SIZE) {\n                me.allFoodPositionsLookup.push({ x: i, y: j });\n            }\n        }\n        var startPosition = me.getRandXY();\n        me.item = new SnakeSegment({\n            ctx: ctx,\n            x: startPosition.x,\n            y: startPosition.y,\n            colour: 'green'\n        });\n    }\n\n    Food.prototype.getRandXY = function getRandXY() {\n        function getRandomInt(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n        var me = this;\n        var min = 0;\n        var max = me.allFoodPositionsLookup.length;\n\n        return me.allFoodPositionsLookup[getRandomInt(min, max)];\n    };\n\n    Food.prototype.setNewPosition = function setNewPosition() {\n        var me = this;\n        var pos = me.getRandXY();\n        me.item.x = pos.x;\n        me.item.y = pos.y;\n    };\n\n    Food.prototype.draw = function draw() {\n        this.item.draw();\n    };\n\n    Food.prototype.clear = function clear() {\n        this.item.clear();\n    };\n\n    function updateSnakeFromDirection(snake, keycode) {\n        snake.head.colour = 'black';\n        snake.head.draw();\n        var curHeadX = snake.head.x;\n        var curHeadY = snake.head.y;\n        snake.tail.clear();\n        var newTail = snake.tail.next;\n        var newHead = snake.tail;\n        newHead.next = null;\n        snake.head.next = newHead;\n        snake.head = newHead;\n        snake.tail = newTail;\n        var direction = dirKeyLookup[keycode];\n        var dirctionUpdate = updateHeadByDirection[direction];\n        snake.head.x = curHeadX + dirctionUpdate.x;\n        snake.head.y = curHeadY + dirctionUpdate.y;\n        snake.head.colour = 'red';\n        snake.head.draw();\n        snake.currentDirection = direction;\n    }\n\n    function checkCollisions(snake) {\n        if (snake.head.equal(food.item)) {\n            snake.grow();\n            snake.grow();\n            food.setNewPosition();\n            updateScore();\n            return;\n        }\n\n        if (snake.head.equal(snake.tail)) {\n            resetGame(snake);\n        }\n\n        var current = snake.tail;\n        while (!snake.head.equal(current) && !current.equal(snake.head)) {\n            if (snake.head.equal(current)) {\n                resetGame(snake);\n            }\n            current = current.next;\n        }\n    }\n\n    document.addEventListener('keydown', function (event) {\n        if (event.keyCode === 81) {\n            gameRunning = false;\n        } else if (event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 38 || event.keyCode == 40) {\n            //LEFT\n            var validUpdate = validDirectionChange(event.keyCode, snake.currentDirection) && insideWorldBounds(event.keyCode, snake.head);\n            if (validUpdate) {\n                updateSnakeFromDirection(snake, event.keyCode);\n            }\n        }\n    });\n\n    /*\r\n                     (_)      \r\n      _ __ ___   __ _ _ _ __  \r\n     | '_ ` _ \\ / _` | | '_ \\ \r\n     | | | | | | (_| | | | | |\r\n     |_| |_| |_|\\__,_|_|_| |_|\r\n    */\n    var canvasEl = document.getElementById('main');\n    canvasEl.style.backgroundColor = 'rgba(158, 167, 184, 0.2)';\n    canvasEl.width = canvasWidth;\n    canvasEl.height = canvasHeight;\n    var ctx = canvasEl.getContext('2d');\n    var snake = new Snake({\n        x: canvasWidth / 2,\n        y: canvasHeight / 2,\n        ctx: ctx\n    });\n\n    var food = new Food(ctx);\n\n    var lastFrameTimeMs = 0; // The last time the loop was run\n    var maxFPS = 31; // The maximum FPS we want to allow\n    snake.currentDirection = 'EAST';\n    snake.drawAll();\n    var currentScore = -1;\n\n    function updateScore(value) {\n        document.getElementById(\"score\").textContent = \"SCORE: \" + ++currentScore;\n    }\n\n    updateScore();\n\n    function resetGame(snake) {\n        snake.clearAll();\n        snake.reset();\n        food.clear();\n        food.setNewPosition();\n        currentScore = -1;\n        updateScore();\n    }\n\n    function update() {\n        var keyCode = reverseDirKeyLookup[snake.currentDirection];\n        var insideWorld = insideWorldBounds(keyCode, snake.head);\n        if (insideWorld) {\n            updateSnakeFromDirection(snake, keyCode);\n        } else {\n            resetGame(snake);\n        }\n        checkCollisions(snake);\n    }\n\n    function draw() {\n        food.draw();\n        snake.drawAll();\n    }\n\n    function gameLoop(timeStamp) {\n        if (gameRunning) {\n            if (timeStamp < lastFrameTimeMs + 1000 / maxFPS) {\n                requestAnimationFrame(gameLoop);\n                return;\n            }\n            lastFrameTimeMs = timeStamp;\n            update();\n            draw();\n            requestAnimationFrame(gameLoop);\n        }\n    }\n    requestAnimationFrame(gameLoop);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);