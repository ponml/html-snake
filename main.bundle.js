/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("var GameObjects = __webpack_require__(1);\nvar Snake = GameObjects.Snake;\nvar Segment = GameObjects.Segment;\nvar Food = GameObjects.Food;\nvar Grid = GameObjects.Grid;\n\nwindow.onload = function () {\n    const canvasWidth = 1520;\n    const canvasHeight = 920;\n\n    var FPS = 60;\n    var gameLoop;\n    var gameRunning = true;\n\n    var dirKeyLookup = {\n        37: 'WEST',\n        38: 'NORTH',\n        39: 'EAST',\n        40: 'SOUTH'\n    };\n\n    var reverseDirKeyLookup = {\n        WEST: 37,\n        NORTH: 38,\n        EAST: 39,\n        SOUTH: 40\n    };\n\n    var unallowedDirLookup = {\n        'WEST': 39,\n        'NORTH': 40,\n        'EAST': 37,\n        'SOUTH': 38\n    };\n\n    var updateHeadByDirection = {\n        NORTH: {\n            y: -1 * Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: Segment.SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: -1 * Segment.SEGMENT_SIZE\n        }\n    };\n\n    var fringeSet = [];\n    var closedSet = [];\n\n    function validDirectionChange(keyCode, currentDirection) {\n        var direction = dirKeyLookup[keyCode];\n        if (currentDirection === direction) {\n            return false;\n        }\n        var unallowed = unallowedDirLookup[currentDirection];\n        return keyCode != unallowed;\n    }\n\n    function insideWorldBounds(keyCode, head) {\n        var direction = dirKeyLookup[keyCode];\n        var directionUpdate = updateHeadByDirection[direction];\n        var newX = head.x + directionUpdate.x;\n        var newY = head.y + directionUpdate.y;\n        return newX <= canvasWidth && newX >= 0 && newY <= canvasHeight && newY >= 0;\n    }\n\n    function updateSnakeFromDirection(snake, keycode) {\n        snake.head.colour = 'black';\n        snake.head.draw();\n        var curHeadX = snake.head.x;\n        var curHeadY = snake.head.y;\n        snake.tail.clear();\n        var newTail = snake.tail.next;\n        var newHead = snake.tail;\n        newHead.next = null;\n        snake.head.next = newHead;\n        snake.head = newHead;\n        snake.tail = newTail;\n        var direction = dirKeyLookup[keycode];\n        var dirctionUpdate = updateHeadByDirection[direction];\n        snake.head.x = curHeadX + dirctionUpdate.x;\n        snake.head.y = curHeadY + dirctionUpdate.y;\n        snake.head.colour = 'red';\n        snake.head.draw();\n        snake.currentDirection = direction;\n    }\n\n    function checkCollisions(snake) {\n        if (snake.head.equal(food.item)) {\n            snake.grow();\n            food.setNewPosition();\n            updateScore();\n            return true;\n        }\n\n        if (snake.head.equal(snake.tail)) {\n            resetGame(snake);\n            return false;\n        }\n\n        var current = snake.tail;\n        while (current != snake.head) {\n            if (snake.head.equal(current)) {\n                resetGame(snake);\n                return false;\n            }\n            current = current.next;\n        }\n        return true;\n    }\n\n    function search() {\n        fringeSet.forEach(function (node) {\n            node.clear();\n        });\n\n        closedSet.forEach(function (node) {\n            node.colour = \"yellow\";\n            node.clear();\n        });\n        fringeSet = [];\n        closedSet = [];\n        fringeSet.push(snake.head);\n    }\n\n    function addChildrenToFringeSet(parentNode) {\n\n        var northCoords = {\n            x: parentNode.x / Segment.SEGMENT_SIZE,\n            y: (parentNode.y - Segment.SEGMENT_SIZE) / Segment.SEGMENT_SIZE\n        };\n        var southCoords = {\n            x: parentNode.x / Segment.SEGMENT_SIZE,\n            y: (parentNode.y + Segment.SEGMENT_SIZE) / Segment.SEGMENT_SIZE\n        };\n        var westCoords = {\n            x: (parentNode.x - Segment.SEGMENT_SIZE) / Segment.SEGMENT_SIZE,\n            y: parentNode.y / Segment.SEGMENT_SIZE\n        };\n        var eastCoords = {\n            x: (parentNode.x + Segment.SEGMENT_SIZE) / Segment.SEGMENT_SIZE,\n            y: parentNode.y / Segment.SEGMENT_SIZE\n        };\n        var children = [];\n        if (northCoords.y >= 0) {\n            children.push(grid.cells[northCoords.x][northCoords.y]);\n        }\n        if (southCoords.y <= canvasHeight) {\n            children.push(grid.cells[southCoords.x][southCoords.y]);\n        }\n        if (westCoords.x >= 0) {\n            children.push(grid.cells[westCoords.x][westCoords.y]);\n        }\n        if (eastCoords.y <= canvasWidth) {\n            children.push(grid.cells[eastCoords.x][eastCoords.y]);\n        }\n\n        children.forEach(function (child) {\n\n            var found = null;\n            var childIsInClosed = closedSet.some(function (item) {\n                return item.equal(child);\n            });\n            if (!childIsInClosed) {\n                child.d = parentNode.d + distanceFromNodeToNode(parentNode, child);\n                var L2 = distanceFromNodeToNode(child, food.item);\n                child.dPlusL2 = child.d + L2;\n                child.parent = parentNode;\n            }\n            fringeSet.push(child);\n        });\n\n        fringeSet.sort(function (a, b) {\n            return a.dPlusL2 > b.dPlusL2 ? 1 : -1;\n        });\n    }\n\n    //http://mnemstudio.org/path-finding-a-star.htm\n    function findRoute() {\n        // fringeSet.forEach(function(node) {\n        //     node.colour = \"orange\";\n        //     node.draw();\n        // });\n\n        // closedSet.forEach(function(node) {\n        //     node.colour = \"yellow\";\n        //     node.draw();\n        // });\n\n\n        if (fringeSet.length === 0) {\n            return 0;\n        } else {\n            var node = fringeSet.shift();\n            if (node.equal(food.item)) {\n                console.log(\"found\");\n                return node;\n            } else {\n                var found = null;\n                var nodeIsInClosed = closedSet.some(function (item) {\n                    return item.equal(node);\n                });\n                if (!nodeIsInClosed) {\n                    closedSet.push(node);\n                    addChildrenToFringeSet(node);\n                }\n                return findRoute();\n            }\n        }\n    }\n\n    function distanceFromNodeToNode(node1, node2) {\n        var node1X = node1.x;\n        var node1Y = node1.y;\n\n        var node2X = node2.x;\n        var node2Y = node2.y;\n\n        var dx = node2X - node1X;\n        var dy = node2Y - node1Y;\n        var distance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n        return distance;\n    }\n\n    document.addEventListener('keydown', function (event) {\n        if (event.keyCode === 81) {\n            gameRunning = false;\n        } else if (event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 38 || event.keyCode == 40) {\n            //LEFT\n            var validUpdate = validDirectionChange(event.keyCode, snake.currentDirection) && insideWorldBounds(event.keyCode, snake.head);\n            if (validUpdate) {\n                updateSnakeFromDirection(snake, event.keyCode);\n            }\n        } else if (event.keyCode === 32) {\n            search();\n            var node = findRoute();\n            if (node.equal(food.item)) {\n                food.item.colour = \"pink\";\n                fringeSet.forEach(function (node) {\n                    node.colour = \"orange\";\n                    node.draw();\n                });\n\n                closedSet.forEach(function (node) {\n                    node.colour = \"yellow\";\n                    node.draw();\n                });\n                var curNode = node.parent;\n                var counter = 0;\n                while (curNode && counter < 100) {\n                    curNode.draw(\"blue\");\n                    curNode = curNode.parent;\n                    counter++;\n                }\n            }\n            update();\n        }\n    });\n\n    /*\r\n                     (_)      \r\n      _ __ ___   __ _ _ _ __  \r\n     | '_ ` _ \\ / _` | | '_ \\ \r\n     | | | | | | (_| | | | | |\r\n     |_| |_| |_|\\__,_|_|_| |_|\r\n    */\n    var canvasEl = document.getElementById('main');\n    canvasEl.style.backgroundColor = 'rgba(158, 167, 184, 0.2)';\n    canvasEl.width = canvasWidth;\n    canvasEl.height = canvasHeight;\n    var ctx = canvasEl.getContext('2d');\n    var g = GameObjects;\n    var snake = new Snake({\n        x: canvasWidth / 2,\n        y: canvasHeight / 2,\n        ctx: ctx\n    });\n\n    var grid = new Grid(ctx, canvasWidth, canvasHeight, Segment.SEGMENT_SIZE);\n    grid.draw();\n    var food = new Food(ctx, canvasWidth, canvasHeight);\n\n    var lastFrameTimeMs = 0; // The last time the loop was run\n    var maxFPS = 31; // The maximum FPS we want to allow\n    snake.currentDirection = 'EAST';\n    snake.drawAll();\n    var currentScore = -1;\n\n    function updateScore(value) {\n        document.getElementById(\"score\").textContent = \"SCORE: \" + ++currentScore;\n    }\n\n    updateScore();\n\n    function resetGame(snake) {\n        snake.clearAll();\n        snake.reset();\n        food.clear();\n        food.setNewPosition();\n        currentScore = -1;\n        updateScore();\n    }\n\n    function update() {\n        var keyCode = reverseDirKeyLookup[snake.currentDirection];\n        var insideWorld = insideWorldBounds(keyCode, snake.head);\n        if (insideWorld) {\n            var check = checkCollisions(snake);\n            if (check) {\n                updateSnakeFromDirection(snake, keyCode);\n            }\n            checkCollisions(snake);\n        } else {\n            resetGame(snake);\n        }\n    }\n\n    function draw() {\n        food.draw();\n        snake.drawAll();\n    }\n\n    function gameLoop(timeStamp) {\n        if (gameRunning) {\n            if (timeStamp < lastFrameTimeMs + 1000 / maxFPS) {\n                requestAnimationFrame(gameLoop);\n                return;\n            }\n            lastFrameTimeMs = timeStamp;\n            //update();\n            draw();\n            requestAnimationFrame(gameLoop);\n        }\n    }\n    requestAnimationFrame(gameLoop);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("function Segment(options) {\n    var me = this;\n\n    me.width = Segment.SEGMENT_SIZE;\n    me.height = Segment.SEGMENT_SIZE;\n    me.colour = options.colour || \"black\";\n    me.next = options.next || null;\n    me.prev = options.prev || null;\n    me.x = options.x;\n    me.y = options.y;\n    me.d = 0;\n    me.dPlusL2 = 0;\n    me.parent = options.parent;\n    me.ctx = options.ctx;\n}\n\nSegment.prototype.updatePos = function updatePos(x, y) {\n    this.x = x;\n    this.y = y;\n};\n\nSegment.prototype.draw = function draw(colour) {\n    var me = this;\n    me.ctx.fillStyle = colour || me.colour;\n    me.ctx.fillRect(me.x, me.y, me.width, me.height);\n};\n\nSegment.prototype.clear = function clear() {\n    var me = this;\n    me.ctx.clearRect(me.x, me.y, me.width, me.height);\n    me.ctx.strokeStyle = \"grey\";\n    me.ctx.strokeRect(me.x, me.y, me.width, me.height);\n};\n\nSegment.prototype.equal = function (otherSegment) {\n    var me = this;\n    if (me.x == otherSegment.x && me.y == otherSegment.y) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nSegment.SEGMENT_SIZE = 20;\n\nfunction Snake(options) {\n    var me = this;\n    me.x = options.x || 0;\n    me.y = options.y || 0;\n\n    me.ctx = options.ctx;\n    me.currentDirection = 'EAST';\n\n    me.reset();\n}\n\nSnake.prototype.reset = function reset() {\n    var me = this;\n\n    me.head = null;\n    me.tail = null;\n\n    var tail = new Segment({\n        x: me.x,\n        y: me.y,\n        ctx: me.ctx\n    });\n    var body = new Segment({\n        x: tail.x + Segment.SEGMENT_SIZE,\n        y: tail.y,\n        ctx: me.ctx\n    });\n    var head = new Segment({\n        x: body.x + Segment.SEGMENT_SIZE,\n        y: body.y,\n        colour: 'red',\n        ctx: me.ctx\n    });\n\n    tail.next = body;\n    body.next = head;\n    head.next = null;\n\n    me.head = head;\n    me.tail = tail;\n\n    me.updateTailByDirection = {\n        NORTH: {\n            y: Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: -1 * Segment.SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: -1 * Segment.SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: Segment.SEGMENT_SIZE\n        }\n    };\n};\n\nSnake.prototype.drawAll = function drawAll() {\n    var me = this;\n    var segment = me.tail;\n    segment.draw();\n    while (segment.next) {\n        segment = segment.next;\n        segment.draw();\n    }\n};\n\nSnake.prototype.clearAll = function clearAll() {\n    var me = this;\n    var segment = me.tail;\n    segment.clear();\n    while (segment.next) {\n        segment = segment.next;\n        segment.clear();\n    }\n};\n\nSnake.prototype.grow = function grow() {\n    var me = this;\n    var directionUpdate = me.updateTailByDirection[me.currentDirection];\n\n    var newTail = new Segment({\n        x: me.tail.x + directionUpdate.x,\n        y: me.tail.y + directionUpdate.y,\n        ctx: me.ctx\n    });\n    newTail.next = me.tail;\n    me.tail = newTail;\n};\n\nfunction Food(ctx, canvasWidth, canvasHeight) {\n    var me = this;\n    me.allFoodPositionsLookup = [];\n    var i, j;\n    for (i = 0; i < canvasWidth; i += Segment.SEGMENT_SIZE) {\n        for (j = 0; j < canvasHeight; j += Segment.SEGMENT_SIZE) {\n            me.allFoodPositionsLookup.push({ x: i, y: j });\n        }\n    }\n    var startPosition = me.getRandXY();\n    me.item = new Segment({\n        ctx: ctx,\n        x: startPosition.x,\n        y: startPosition.y,\n        colour: 'green'\n    });\n}\n\nFood.prototype.getRandXY = function getRandXY() {\n    function getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    var me = this;\n    var min = 0;\n    var max = me.allFoodPositionsLookup.length;\n\n    return me.allFoodPositionsLookup[getRandomInt(min, max)];\n};\n\nFood.prototype.setNewPosition = function setNewPosition() {\n    var me = this;\n    var pos = me.getRandXY();\n    me.item.colour = \"green\";\n    me.item.x = pos.x;\n    me.item.y = pos.y;\n};\n\nFood.prototype.draw = function draw() {\n    this.item.draw();\n};\n\nFood.prototype.clear = function clear() {\n    this.item.clear();\n};\n\nfunction Grid(ctx, width, height, cellSize) {\n    var me = this;\n    me.cells = [];\n    me.ctx = ctx;\n    me.width = width;\n    me.height = height;\n    me.cellSize = cellSize;\n\n    var x, y;\n    for (x = 0; x < width; x += cellSize) {\n        for (y = 0; y < height; y += cellSize) {\n            var index = x / cellSize;\n            var newCell = new Segment({\n                x: x,\n                y: y,\n                width: Segment.SEGMENT_SIZE,\n                height: Segment.SEGMENT_SIZE,\n                ctx: ctx\n            });\n            if (!me.cells[index]) {\n                me.cells[index] = [newCell];\n            } else {\n                me.cells[index].push(newCell);\n            }\n        }\n    }\n}\n\nGrid.prototype.draw = function draw() {\n    var me = this;\n    for (x = 0; x < me.width; x += me.cellSize) {\n        for (y = 0; y < me.height; y += me.cellSize) {\n            var cell = me.cells[x / me.cellSize][y / me.cellSize];\n            me.ctx.strokeStyle = \"grey\";\n            me.ctx.strokeRect(cell.x, cell.y, cell.width, cell.height);\n        }\n    }\n};\n\nmodule.exports = {\n    Food: Food,\n    Snake: Snake,\n    Segment: Segment,\n    Grid: Grid\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL3NuYWtlLmpzP2FlZTMiXSwibmFtZXMiOlsiU2VnbWVudCIsIm9wdGlvbnMiLCJtZSIsIndpZHRoIiwiU0VHTUVOVF9TSVpFIiwiaGVpZ2h0IiwiY29sb3VyIiwibmV4dCIsInByZXYiLCJ4IiwieSIsImQiLCJkUGx1c0wyIiwicGFyZW50IiwiY3R4IiwicHJvdG90eXBlIiwidXBkYXRlUG9zIiwiZHJhdyIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiY2xlYXIiLCJjbGVhclJlY3QiLCJzdHJva2VTdHlsZSIsInN0cm9rZVJlY3QiLCJlcXVhbCIsIm90aGVyU2VnbWVudCIsIlNuYWtlIiwiY3VycmVudERpcmVjdGlvbiIsInJlc2V0IiwiaGVhZCIsInRhaWwiLCJib2R5IiwidXBkYXRlVGFpbEJ5RGlyZWN0aW9uIiwiTk9SVEgiLCJTT1VUSCIsIkVBU1QiLCJXRVNUIiwiZHJhd0FsbCIsInNlZ21lbnQiLCJjbGVhckFsbCIsImdyb3ciLCJkaXJlY3Rpb25VcGRhdGUiLCJuZXdUYWlsIiwiRm9vZCIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiYWxsRm9vZFBvc2l0aW9uc0xvb2t1cCIsImkiLCJqIiwicHVzaCIsInN0YXJ0UG9zaXRpb24iLCJnZXRSYW5kWFkiLCJpdGVtIiwiZ2V0UmFuZG9tSW50IiwibWluIiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwic2V0TmV3UG9zaXRpb24iLCJwb3MiLCJHcmlkIiwiY2VsbFNpemUiLCJjZWxscyIsImluZGV4IiwibmV3Q2VsbCIsImNlbGwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxPQUFULENBQWlCQyxPQUFqQixFQUEwQjtBQUN0QixRQUFJQyxLQUFLLElBQVQ7O0FBRUFBLE9BQUdDLEtBQUgsR0FBV0gsUUFBUUksWUFBbkI7QUFDQUYsT0FBR0csTUFBSCxHQUFZTCxRQUFRSSxZQUFwQjtBQUNBRixP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QUFTQyxLQUFULENBQUosRUFBcUI7QUFDakIvRCxtQkFBRzhELEtBQUgsQ0FBU0MsS0FBVCxJQUFrQixDQUFDQyxPQUFELENBQWxCO0FBQ0gsYUFGRCxNQUVPO0FBQ0hoRSxtQkFBRzhELEtBQUgsQ0FBU0MsS0FBVCxFQUFnQmhCLElBQWhCLENBQXFCaUIsT0FBckI7QUFDSDtBQUNKO0FBQ0o7QUFDSjs7QUFFREosS0FBSy9DLFNBQUwsQ0FBZUUsSUFBZixHQUFzQixTQUFTQSxJQUFULEdBQWdCO0FBQ2xDLFFBQUlmLEtBQUssSUFBVDtBQUNBLFNBQUlPLElBQUksQ0FBUixFQUFXQSxJQUFJUCxHQUFHQyxLQUFsQixFQUEwQk0sS0FBS1AsR0FBRzZELFFBQWxDLEVBQTRDO0FBQ3hDLGFBQUlyRCxJQUFJLENBQVIsRUFBWUEsSUFBSVIsR0FBR0csTUFBbkIsRUFBMkJLLEtBQUtSLEdBQUc2RCxRQUFuQyxFQUE2QztBQUN6QyxnQkFBSUksT0FBT2pFLEdBQUc4RCxLQUFILENBQVN2RCxJQUFFUCxHQUFHNkQsUUFBZCxFQUF3QnJELElBQUVSLEdBQUc2RCxRQUE3QixDQUFYO0FBQ0E3RCxlQUFHWSxHQUFILENBQU9RLFdBQVAsR0FBbUIsTUFBbkI7QUFDQXBCLGVBQUdZLEdBQUgsQ0FBT1MsVUFBUCxDQUFrQjRDLEtBQUsxRCxDQUF2QixFQUEwQjBELEtBQUt6RCxDQUEvQixFQUFrQ3lELEtBQUtoRSxLQUF2QyxFQUE4Q2dFLEtBQUs5RCxNQUFuRDtBQUNIO0FBQ0o7QUFFSixDQVZEOztBQWFBK0QsT0FBT0MsT0FBUCxHQUFpQjtBQUNiMUIsVUFBTUEsSUFETztBQUViakIsV0FBT0EsS0FGTTtBQUdiMUIsYUFBU0EsT0FISTtBQUliOEQsVUFBTUE7QUFKTyxDQUFqQiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gU2VnbWVudChvcHRpb25zKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG5cclxuICAgIG1lLndpZHRoID0gU2VnbWVudC5TRUdNRU5UX1NJWkU7XHJcbiAgICBtZS5oZWlnaHQgPSBTZWdtZW50LlNFR01FTlRfU0laRTtcclxuICAgIG1lLmNvbG91ciA9IG9wdGlvbnMuY29sb3VyIHx8IFwiYmxhY2tcIjtcclxuICAgIG1lLm5leHQgPSBvcHRpb25zLm5leHQgfHwgbnVsbDtcclxuICAgIG1lLnByZXYgPSBvcHRpb25zLnByZXYgfHwgbnVsbDtcclxuICAgIG1lLnggPSBvcHRpb25zLng7XHJcbiAgICBtZS55ID0gb3B0aW9ucy55O1xyXG4gICAgbWUuZCA9IDA7XHJcbiAgICBtZS5kUGx1c0wyID0gMDtcclxuICAgIG1lLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xyXG4gICAgbWUuY3R4ID0gb3B0aW9ucy5jdHg7XHJcbn1cclxuXHJcblNlZ21lbnQucHJvdG90eXBlLnVwZGF0ZVBvcyA9IGZ1bmN0aW9uIHVwZGF0ZVBvcyh4LCB5KSB7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxufTsgIFxyXG5cclxuU2VnbWVudC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIGRyYXcoY29sb3VyKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgbWUuY3R4LmZpbGxTdHlsZSA9IGNvbG91ciB8fCBtZS5jb2xvdXI7XHJcbiAgICBtZS5jdHguZmlsbFJlY3QobWUueCwgbWUueSwgbWUud2lkdGgsIG1lLmhlaWdodCk7XHJcbn07XHJcblxyXG5TZWdtZW50LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xyXG4gICAgdmFyIG1lID0gdGhpcztcclxuICAgIG1lLmN0eC5jbGVhclJlY3QobWUueCwgbWUueSwgbWUud2lkdGgsIG1lLmhlaWdodCk7XHJcbiAgICBtZS5jdHguc3Ryb2tlU3R5bGU9XCJncmV5XCI7XHJcbiAgICBtZS5jdHguc3Ryb2tlUmVjdChtZS54LCBtZS55LCBtZS53aWR0aCwgbWUuaGVpZ2h0KTtcclxufTtcclxuXHJcblNlZ21lbnQucHJvdG90eXBlLmVxdWFsID0gZnVuY3Rpb24ob3RoZXJTZWdtZW50KSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgaWYobWUueCA9PSBvdGhlclNlZ21lbnQueCAmJiBtZS55ID09IG90aGVyU2VnbWVudC55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufTtcclxuXHJcblNlZ21lbnQuU0VHTUVOVF9TSVpFID0gMjA7XHJcblxyXG5mdW5jdGlvbiBTbmFrZShvcHRpb25zKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzOyAgIFxyXG4gICAgbWUueCA9IG9wdGlvbnMueCB8fCAwO1xyXG4gICAgbWUueSA9IG9wdGlvbnMueSB8fCAwO1xyXG5cclxuICAgIG1lLmN0eCA9IG9wdGlvbnMuY3R4O1xyXG4gICAgbWUuY3VycmVudERpcmVjdGlvbiA9ICdFQVNUJztcclxuXHJcbiAgICBtZS5yZXNldCgpO1xyXG59XHJcblxyXG5TbmFrZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICBcclxuICAgIG1lLmhlYWQgPSBudWxsO1xyXG4gICAgbWUudGFpbCA9IG51bGw7XHJcblxyXG4gICAgdmFyIHRhaWwgPSBuZXcgU2VnbWVudCh7XHJcbiAgICAgICAgeDogbWUueCxcclxuICAgICAgICB5OiBtZS55LFxyXG4gICAgICAgIGN0eDogbWUuY3R4XHJcbiAgICB9KTtcclxuICAgIHZhciBib2R5ID0gbmV3IFNlZ21lbnQoe1xyXG4gICAgICAgIHg6IHRhaWwueCArIFNlZ21lbnQuU0VHTUVOVF9TSVpFLFxyXG4gICAgICAgIHk6IHRhaWwueSxcclxuICAgICAgICBjdHg6IG1lLmN0eFxyXG4gICAgfSk7XHJcbiAgICB2YXIgaGVhZCA9IG5ldyBTZWdtZW50KHtcclxuICAgICAgICB4OiBib2R5LnggKyBTZWdtZW50LlNFR01FTlRfU0laRSxcclxuICAgICAgICB5OiBib2R5LnksXHJcbiAgICAgICAgY29sb3VyOiAncmVkJyxcclxuICAgICAgICBjdHg6IG1lLmN0eFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGFpbC5uZXh0ID0gYm9keTtcclxuICAgIGJvZHkubmV4dCA9IGhlYWQ7XHJcbiAgICBoZWFkLm5leHQgPSBudWxsO1xyXG5cclxuICAgIG1lLmhlYWQgPSBoZWFkO1xyXG4gICAgbWUudGFpbCA9IHRhaWw7XHJcblxyXG4gICAgbWUudXBkYXRlVGFpbEJ5RGlyZWN0aW9uID0ge1xyXG4gICAgICAgIE5PUlRIOiB7XHJcbiAgICAgICAgICAgIHk6IFNlZ21lbnQuU0VHTUVOVF9TSVpFLFxyXG4gICAgICAgICAgICB4OiAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBTT1VUSDoge1xyXG4gICAgICAgICAgICB5OiAtMSAqIFNlZ21lbnQuU0VHTUVOVF9TSVpFLFxyXG4gICAgICAgICAgICB4OiAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICBFQVNUOiB7XHJcbiAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgICAgIHg6IC0xICogU2VnbWVudC5TRUdNRU5UX1NJWkVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFdFU1Q6IHtcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgeDogU2VnbWVudC5TRUdNRU5UX1NJWkVcclxuICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgfTtcclxuXHJcbn07XHJcblxyXG5TbmFrZS5wcm90b3R5cGUuZHJhd0FsbCA9IGZ1bmN0aW9uIGRyYXdBbGwoKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgdmFyIHNlZ21lbnQgPSBtZS50YWlsO1xyXG4gICAgc2VnbWVudC5kcmF3KCk7XHJcbiAgICB3aGlsZShzZWdtZW50Lm5leHQpIHtcclxuICAgICAgICBzZWdtZW50ID0gc2VnbWVudC5uZXh0O1xyXG4gICAgICAgIHNlZ21lbnQuZHJhdygpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuU25ha2UucHJvdG90eXBlLmNsZWFyQWxsID0gZnVuY3Rpb24gY2xlYXJBbGwoKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgdmFyIHNlZ21lbnQgPSBtZS50YWlsO1xyXG4gICAgc2VnbWVudC5jbGVhcigpO1xyXG4gICAgd2hpbGUoc2VnbWVudC5uZXh0KSB7XHJcbiAgICAgICAgc2VnbWVudCA9IHNlZ21lbnQubmV4dDtcclxuICAgICAgICBzZWdtZW50LmNsZWFyKCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5TbmFrZS5wcm90b3R5cGUuZ3JvdyA9IGZ1bmN0aW9uIGdyb3coKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgdmFyIGRpcmVjdGlvblVwZGF0ZSA9IG1lLnVwZGF0ZVRhaWxCeURpcmVjdGlvblttZS5jdXJyZW50RGlyZWN0aW9uXTtcclxuXHJcbiAgICB2YXIgbmV3VGFpbCA9IG5ldyBTZWdtZW50KHtcclxuICAgICAgICB4OiBtZS50YWlsLnggKyBkaXJlY3Rpb25VcGRhdGUueCxcclxuICAgICAgICB5OiBtZS50YWlsLnkgKyBkaXJlY3Rpb25VcGRhdGUueSxcclxuICAgICAgICBjdHg6IG1lLmN0eFxyXG4gICAgfSk7XHJcbiAgICBuZXdUYWlsLm5leHQgPSBtZS50YWlsO1xyXG4gICAgbWUudGFpbCA9IG5ld1RhaWw7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBGb29kKGN0eCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCkge1xyXG4gICAgdmFyIG1lID0gdGhpcztcclxuICAgIG1lLmFsbEZvb2RQb3NpdGlvbnNMb29rdXAgPSBbXTtcclxuICAgIHZhciBpLGo7XHJcbiAgICBmb3IoaSA9IDAgOyBpIDwgY2FudmFzV2lkdGggOyBpICs9IFNlZ21lbnQuU0VHTUVOVF9TSVpFKSB7XHJcbiAgICAgICAgZm9yKGogPSAwOyBqIDwgY2FudmFzSGVpZ2h0IDsgaiArPSBTZWdtZW50LlNFR01FTlRfU0laRSkge1xyXG4gICAgICAgICAgICBtZS5hbGxGb29kUG9zaXRpb25zTG9va3VwLnB1c2goeyB4OiBpLCB5OiBqIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBzdGFydFBvc2l0aW9uID0gbWUuZ2V0UmFuZFhZKCk7XHJcbiAgICBtZS5pdGVtID0gbmV3IFNlZ21lbnQoe1xyXG4gICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgIHg6IHN0YXJ0UG9zaXRpb24ueCxcclxuICAgICAgICB5OiBzdGFydFBvc2l0aW9uLnksXHJcbiAgICAgICAgY29sb3VyOiAnZ3JlZW4nXHJcbiAgICB9KTtcclxufVxyXG5cclxuRm9vZC5wcm90b3R5cGUuZ2V0UmFuZFhZID0gZnVuY3Rpb24gZ2V0UmFuZFhZKCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xyXG4gICAgfVxyXG4gICAgdmFyIG1lID0gdGhpcztcclxuICAgIHZhciBtaW4gPSAwO1xyXG4gICAgdmFyIG1heCA9IG1lLmFsbEZvb2RQb3NpdGlvbnNMb29rdXAubGVuZ3RoO1xyXG4gICAgXHJcbiAgICByZXR1cm4gbWUuYWxsRm9vZFBvc2l0aW9uc0xvb2t1cFtnZXRSYW5kb21JbnQobWluLCBtYXgpXTtcclxufTtcclxuXHJcbkZvb2QucHJvdG90eXBlLnNldE5ld1Bvc2l0aW9uID0gZnVuY3Rpb24gc2V0TmV3UG9zaXRpb24oKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgdmFyIHBvcyA9IG1lLmdldFJhbmRYWSgpO1xyXG4gICAgbWUuaXRlbS5jb2xvdXIgPSBcImdyZWVuXCI7XHJcbiAgICBtZS5pdGVtLnggPSBwb3MueDtcclxuICAgIG1lLml0ZW0ueSA9IHBvcy55OyAgIFxyXG59O1xyXG5cclxuRm9vZC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICB0aGlzLml0ZW0uZHJhdygpO1xyXG59XHJcblxyXG5Gb29kLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xyXG4gICAgdGhpcy5pdGVtLmNsZWFyKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdyaWQoY3R4LCB3aWR0aCwgaGVpZ2h0LCBjZWxsU2l6ZSkge1xyXG4gICAgdmFyIG1lID0gdGhpcztcclxuICAgIG1lLmNlbGxzID0gW107XHJcbiAgICBtZS5jdHggPSBjdHg7XHJcbiAgICBtZS53aWR0aCA9IHdpZHRoO1xyXG4gICAgbWUuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgbWUuY2VsbFNpemUgPSBjZWxsU2l6ZTtcclxuXHJcbiAgICB2YXIgeCx5O1xyXG4gICAgZm9yKHggPSAwOyB4IDwgd2lkdGggOyB4ICs9IGNlbGxTaXplKSB7XHJcbiAgICAgICAgZm9yKHkgPSAwIDsgeSA8IGhlaWdodDsgeSArPSBjZWxsU2l6ZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB4L2NlbGxTaXplO1xyXG4gICAgICAgICAgICB2YXIgbmV3Q2VsbCA9IG5ldyBTZWdtZW50KHtcclxuICAgICAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgICAgICB5OiB5LFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFNlZ21lbnQuU0VHTUVOVF9TSVpFLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBTZWdtZW50LlNFR01FTlRfU0laRSxcclxuICAgICAgICAgICAgICAgIGN0eDogY3R4XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZighbWUuY2VsbHNbaW5kZXhdKSB7XHJcbiAgICAgICAgICAgICAgICBtZS5jZWxsc1tpbmRleF0gPSBbbmV3Q2VsbF07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtZS5jZWxsc1tpbmRleF0ucHVzaChuZXdDZWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuR3JpZC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIGRyYXcoKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgZm9yKHggPSAwOyB4IDwgbWUud2lkdGggOyB4ICs9IG1lLmNlbGxTaXplKSB7XHJcbiAgICAgICAgZm9yKHkgPSAwIDsgeSA8IG1lLmhlaWdodDsgeSArPSBtZS5jZWxsU2l6ZSkge1xyXG4gICAgICAgICAgICB2YXIgY2VsbCA9IG1lLmNlbGxzW3gvbWUuY2VsbFNpemVdW3kvbWUuY2VsbFNpemVdO1xyXG4gICAgICAgICAgICBtZS5jdHguc3Ryb2tlU3R5bGU9XCJncmV5XCI7XHJcbiAgICAgICAgICAgIG1lLmN0eC5zdHJva2VSZWN0KGNlbGwueCwgY2VsbC55LCBjZWxsLndpZHRoLCBjZWxsLmhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSAgICBcclxuICAgIFxyXG59XHJcbiAgICBcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgRm9vZDogRm9vZCxcclxuICAgIFNuYWtlOiBTbmFrZSxcclxuICAgIFNlZ21lbnQ6IFNlZ21lbnQsXHJcbiAgICBHcmlkOiBHcmlkLFxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zY3JpcHRzL3NuYWtlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
/******/ ]);