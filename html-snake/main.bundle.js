/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	eval("window.onload = function () {\n    const canvasWidth = 1520;\n    const canvasHeight = 920;\n    var SEGMENT_SIZE = 20;\n    var FPS = 60;\n    var gameLoop;\n    var gameRunning = true;\n\n    var dirKeyLookup = {\n        37: 'WEST',\n        38: 'NORTH',\n        39: 'EAST',\n        40: 'SOUTH'\n    };\n\n    var reverseDirKeyLookup = {\n        WEST: 37,\n        NORTH: 38,\n        EAST: 39,\n        SOUTH: 40\n    };\n\n    var unallowedDirLookup = {\n        'WEST': 39,\n        'NORTH': 40,\n        'EAST': 37,\n        'SOUTH': 38\n    };\n\n    var updateHeadByDirection = {\n        NORTH: {\n            y: -1 * SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: -1 * SEGMENT_SIZE\n        }\n    };\n\n    var updateTailByDirection = {\n        NORTH: {\n            y: SEGMENT_SIZE,\n            x: 0\n        },\n        SOUTH: {\n            y: -1 * SEGMENT_SIZE,\n            x: 0\n        },\n        EAST: {\n            y: 0,\n            x: -1 * SEGMENT_SIZE\n        },\n        WEST: {\n            y: 0,\n            x: SEGMENT_SIZE\n        }\n    };\n\n    function validDirectionChange(keyCode, currentDirection) {\n        var direction = dirKeyLookup[keyCode];\n        if (currentDirection === direction) {\n            return false;\n        }\n        var unallowed = unallowedDirLookup[currentDirection];\n        return keyCode != unallowed;\n    }\n\n    function insideWorldBounds(keyCode, head) {\n        var direction = dirKeyLookup[keyCode];\n        var directionUpdate = updateHeadByDirection[direction];\n        var newX = head.x + directionUpdate.x;\n        var newY = head.y + directionUpdate.y;\n        return newX <= canvasWidth && newX >= 0 && newY <= canvasHeight && newY >= 0;\n    }\n\n    function Snake(options) {\n        var me = this;\n        me.x = options.x || 0;\n        me.y = options.y || 0;\n\n        me.ctx = options.ctx;\n        me.currentDirection = 'EAST';\n\n        me.reset();\n    }\n\n    Snake.prototype.reset = function reset() {\n        var me = this;\n\n        me.head = null;\n        me.tail = null;\n\n        var tail = new SnakeSegment({\n            x: me.x,\n            y: me.y,\n            ctx: me.ctx\n        });\n        var body = new SnakeSegment({\n            x: tail.x + SEGMENT_SIZE,\n            y: tail.y,\n            ctx: me.ctx\n        });\n        var head = new SnakeSegment({\n            x: body.x + SEGMENT_SIZE,\n            y: body.y,\n            colour: 'red',\n            ctx: me.ctx\n        });\n\n        tail.next = body;\n        body.next = head;\n        head.next = null;\n\n        me.head = head;\n        me.tail = tail;\n    };\n\n    Snake.prototype.drawAll = function drawAll() {\n        var me = this;\n        var segment = me.tail;\n        segment.draw();\n        while (segment.next) {\n            segment = segment.next;\n            segment.draw();\n        }\n    };\n\n    Snake.prototype.clearAll = function clearAll() {\n        var me = this;\n        var segment = me.tail;\n        segment.clear();\n        while (segment.next) {\n            segment = segment.next;\n            segment.clear();\n        }\n    };\n\n    Snake.prototype.grow = function grow() {\n        var me = this;\n        var directionUpdate = updateTailByDirection[me.currentDirection];\n\n        var newTail = new SnakeSegment({\n            x: me.tail.x + directionUpdate.x,\n            y: me.tail.y + directionUpdate.y,\n            ctx: me.ctx\n        });\n        newTail.next = me.tail;\n        me.tail = newTail;\n    };\n\n    function SnakeSegment(options) {\n        var me = this;\n\n        me.width = SEGMENT_SIZE;\n        me.height = SEGMENT_SIZE;\n        me.colour = options.colour || \"black\";\n        me.next = options.next || null;\n        me.prev = options.prev || null;\n        me.x = options.x;\n        me.y = options.y;\n        me.ctx = options.ctx;\n    }\n\n    SnakeSegment.prototype.updatePos = function updatePos(x, y) {\n        this.x = x;\n        this.y = y;\n    };\n\n    SnakeSegment.prototype.draw = function draw() {\n        var me = this;\n        me.ctx.fillStyle = me.colour;\n        me.ctx.fillRect(me.x, me.y, me.width, me.height);\n    };\n\n    SnakeSegment.prototype.clear = function clear() {\n        var me = this;\n        me.ctx.clearRect(me.x, me.y, me.width, me.height);\n    };\n\n    SnakeSegment.prototype.equal = function (otherSegment) {\n        var me = this;\n        if (me.x == otherSegment.x && me.y == otherSegment.y) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    function Food(ctx) {\n        var me = this;\n        me.allFoodPositionsLookup = [];\n        var i, j;\n        for (i = 0; i < canvasWidth; i += SEGMENT_SIZE) {\n            for (j = 0; j < canvasHeight; j += SEGMENT_SIZE) {\n                me.allFoodPositionsLookup.push({ x: i, y: j });\n            }\n        }\n        var startPosition = me.getRandXY();\n        me.item = new SnakeSegment({\n            ctx: ctx,\n            x: startPosition.x,\n            y: startPosition.y,\n            colour: 'green'\n        });\n    }\n\n    Food.prototype.getRandXY = function getRandXY() {\n        function getRandomInt(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n        var me = this;\n        var min = 0;\n        var max = me.allFoodPositionsLookup.length;\n\n        return me.allFoodPositionsLookup[getRandomInt(min, max)];\n    };\n\n    Food.prototype.setNewPosition = function setNewPosition() {\n        var me = this;\n        var pos = me.getRandXY();\n        me.item.x = pos.x;\n        me.item.y = pos.y;\n    };\n\n    Food.prototype.draw = function draw() {\n        this.item.draw();\n    };\n\n    Food.prototype.clear = function clear() {\n        this.item.clear();\n    };\n\n    function updateSnakeFromDirection(snake, keycode) {\n        snake.head.colour = 'black';\n        snake.head.draw();\n        var curHeadX = snake.head.x;\n        var curHeadY = snake.head.y;\n        snake.tail.clear();\n        var newTail = snake.tail.next;\n        var newHead = snake.tail;\n        newHead.next = null;\n        snake.head.next = newHead;\n        snake.head = newHead;\n        snake.tail = newTail;\n        var direction = dirKeyLookup[keycode];\n        var dirctionUpdate = updateHeadByDirection[direction];\n        snake.head.x = curHeadX + dirctionUpdate.x;\n        snake.head.y = curHeadY + dirctionUpdate.y;\n        snake.head.colour = 'red';\n        snake.head.draw();\n        snake.currentDirection = direction;\n    }\n\n    function checkCollisions(snake) {\n        if (snake.head.equal(food.item)) {\n            snake.grow();\n            snake.grow();\n            food.setNewPosition();\n            updateScore();\n            return true;\n        }\n\n        if (snake.head.equal(snake.tail)) {\n            resetGame(snake);\n            return false;\n        }\n\n        var current = snake.tail;\n        while (current != snake.head) {\n            if (snake.head.equal(current)) {\n                resetGame(snake);\n                return false;\n            }\n            current = current.next;\n        }\n        return true;\n    }\n\n    document.addEventListener('keydown', function (event) {\n        if (event.keyCode === 81) {\n            gameRunning = false;\n        } else if (event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 38 || event.keyCode == 40) {\n            //LEFT\n            var validUpdate = validDirectionChange(event.keyCode, snake.currentDirection) && insideWorldBounds(event.keyCode, snake.head);\n            if (validUpdate) {\n                updateSnakeFromDirection(snake, event.keyCode);\n            }\n        }\n    });\n\n    /*\r\n                     (_)      \r\n      _ __ ___   __ _ _ _ __  \r\n     | '_ ` _ \\ / _` | | '_ \\ \r\n     | | | | | | (_| | | | | |\r\n     |_| |_| |_|\\__,_|_|_| |_|\r\n    */\n    var canvasEl = document.getElementById('main');\n    canvasEl.style.backgroundColor = 'rgba(158, 167, 184, 0.2)';\n    canvasEl.width = canvasWidth;\n    canvasEl.height = canvasHeight;\n    var ctx = canvasEl.getContext('2d');\n    var snake = new Snake({\n        x: canvasWidth / 2,\n        y: canvasHeight / 2,\n        ctx: ctx\n    });\n\n    var food = new Food(ctx);\n\n    var lastFrameTimeMs = 0; // The last time the loop was run\n    var maxFPS = 31; // The maximum FPS we want to allow\n    snake.currentDirection = 'EAST';\n    snake.drawAll();\n    var currentScore = -1;\n\n    function updateScore(value) {\n        document.getElementById(\"score\").textContent = \"SCORE: \" + ++currentScore;\n    }\n\n    updateScore();\n\n    function resetGame(snake) {\n        snake.clearAll();\n        snake.reset();\n        food.clear();\n        food.setNewPosition();\n        currentScore = -1;\n        updateScore();\n    }\n\n    function update() {\n        var keyCode = reverseDirKeyLookup[snake.currentDirection];\n        var insideWorld = insideWorldBounds(keyCode, snake.head);\n        if (insideWorld) {\n            var check = checkCollisions(snake);\n            if (check) {\n                updateSnakeFromDirection(snake, keyCode);\n            }\n            checkCollisions(snake);\n        } else {\n            resetGame(snake);\n        }\n    }\n\n    function draw() {\n        food.draw();\n        snake.drawAll();\n    }\n\n    function gameLoop(timeStamp) {\n        if (gameRunning) {\n            if (timeStamp < lastFrameTimeMs + 1000 / maxFPS) {\n                requestAnimationFrame(gameLoop);\n                return;\n            }\n            lastFrameTimeMs = timeStamp;\n            update();\n            draw();\n            requestAnimationFrame(gameLoop);\n        }\n    }\n    requestAnimationFrame(gameLoop);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAuanM/ZDhlZSJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJvbmxvYWQiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsIlNFR01FTlRfU0laRSIsIkZQUyIsImdhbWVMb29wIiwiZ2FtZVJ1bm5pbmciLCJkaXJLZXlMb29rdXAiLCJyZXZlcnNlRGlyS2V5TG9va3VwIiwiV0VTVCIsIk5PUlRIIiwiRUFTVCIsIlNPVVRIIiwidW5hbGxvd2VkRGlyTG9va3VwIiwidXBkYXRlSGVhZEJ5RGlyZWN0aW9uIiwieSIsIngiLCJ1cGRhdGVUYWlsQnlEaXJlY3Rpb24iLCJ2YWxpZERpcmVjdGlvbkNoYW5nZSIsImtleUNvZGUiLCJjdXJyZW50RGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwidW5hbGxvd2VkIiwiaW5zaWRlV29ybGRCb3VuZHMiLCJoZWFkIiwiZGlyZWN0aW9uVXBkYXRlIiwibmV3WCIsIm5ld1kiLCJTbmFrZSIsIm9wdGlvbnMiLCJtZSIsImN0eCIsInJlc2V0IiwicHJvdG90eXBlIiwidGFpbCIsIlNuYWtlU2VnbWVudCIsImJvZHkiLCJjb2xvdXIiLCJuZXh0IiwiZHJhd0FsbCIsInNlZ21lbnQiLCJkcmF3IiwiY2xlYXJBbGwiLCJjbGVhciIsImdyb3ciLCJuZXdUYWlsIiwid2lkdGgiLCJoZWlnaHQiLCJwcmV2IiwidXBkYXRlUG9zIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJjbGVhclJlY3QiLCJlcXVhbCIsIm90aGVyU2VnbWVudCIsIkZvb2QiLCJhbGxGb29kUG9zaXRpb25zTG9va3VwIiwiaSIsImoiLCJwdXNoIiwic3RhcnRQb3NpdGlvbiIsImdldFJhbmRYWSIsIml0ZW0iLCJnZXRSYW5kb21JbnQiLCJtaW4iLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiLCJzZXROZXdQb3NpdGlvbiIsInBvcyIsInVwZGF0ZVNuYWtlRnJvbURpcmVjdGlvbiIsInNuYWtlIiwia2V5Y29kZSIsImN1ckhlYWRYIiwiY3VySGVhZFkiLCJuZXdIZWFkIiwiZGlyY3Rpb25VcGRhdGUiLCJjaGVja0NvbGxpc2lvbnMiLCJmb29kIiwidXBkYXRlU2NvcmUiLCJyZXNldEdhbWUiLCJjdXJyZW50IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ2YWxpZFVwZGF0ZSIsImNhbnZhc0VsIiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsImdldENvbnRleHQiLCJsYXN0RnJhbWVUaW1lTXMiLCJtYXhGUFMiLCJjdXJyZW50U2NvcmUiLCJ2YWx1ZSIsInRleHRDb250ZW50IiwidXBkYXRlIiwiaW5zaWRlV29ybGQiLCJjaGVjayIsInRpbWVTdGFtcCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE1BQVAsR0FBZ0IsWUFBVztBQUN2QixVQUFNQyxjQUFjLElBQXBCO0FBQ0EsVUFBTUMsZUFBZSxHQUFyQjtBQUNBLFFBQUlDLGVBQWUsRUFBbkI7QUFDQSxRQUFJQyxNQUFNLEVBQVY7QUFDQSxRQUFJQyxRQUFKO0FBQ0EsUUFBSUMsY0FBYyxJQUFsQjs7QUFFQSxRQUFJQyxlQUFlO0FBQ2YsWUFBSSxNQURXO0FBRWYsWUFBSSxPQUZXO0FBR2YsWUFBSSxNQUhXO0FBSWYsWUFBSTtBQUpXLEtBQW5COztBQU9DLFFBQUlDLHNCQUFzQjtBQUN2QkMsY0FBTSxFQURpQjtBQUV2QkMsZUFBTyxFQUZnQjtBQUd2QkMsY0FBTSxFQUhpQjtBQUl2QkMsZUFBTztBQUpnQixLQUExQjs7QUFPRCxRQUFJQyxxQkFBcUI7QUFDckIsZ0JBQVEsRUFEYTtBQUVyQixpQkFBUyxFQUZZO0FBR3JCLGdCQUFRLEVBSGE7QUFJckIsaUJBQVM7QUFKWSxLQUF6Qjs7QUFPQSxRQUFJQyx3QkFBd0I7QUFDeEJKLGVBQU87QUFDSEssZUFBRyxDQUFDLENBQUQsR0FBS1osWUFETDtBQUVIYSxlQUFHO0FBRkEsU0FEaUI7QUFLeEJKLGVBQU87QUFDSEcsZUFBR1osWUFEQTtBQUVIYSxlQUFHO0FBRkEsU0FMaUI7QUFTeEJMLGNBQU07QUFDRkksZUFBRyxDQUREO0FBRUZDLGVBQUdiO0FBRkQsU0FUa0I7QUFheEJNLGNBQU07QUFDRk0sZUFBRyxDQUREO0FBRUZDLGVBQUcsQ0FBQyxDQUFELEdBQUtiO0FBRk47QUFia0IsS0FBNUI7O0FBbUJBLFFBQUljLHdCQUF3QjtBQUN4QlAsZUFBTztBQUNISyxlQUFHWixZQURBO0FBRUhhLGVBQUc7QUFGQSxTQURpQjtBQUt4QkosZUFBTztBQUNIRyxlQUFHLENBQUMsQ0FBRCxHQUFLWixZQURMO0FBRUhhLGVBQUc7QUFGQSxTQUxpQjtBQVN4QkwsY0FBTTtBQUNGSSxlQUFHLENBREQ7QUFFRkMsZUFBRyxDQUFDLENBQUQsR0FBS2I7QUFGTixTQVRrQjtBQWF4Qk0sY0FBTTtBQUNGTSxlQUFHLENBREQ7QUFFRkMsZUFBR2I7QUFGRDtBQWJrQixLQUE1Qjs7QUFtQkEsYUFBU2Usb0JBQVQsQ0FBOEJDLE9BQTlCLEVBQXVDQyxnQkFBdkMsRUFBeUQ7QUFDckQsWUFBSUMsWUFBWWQsYUFBYVksT0FBYixDQUFoQjtBQUNBLFlBQUdDLHFCQUFxQkMsU0FBeEIsRUFBbUM7QUFDL0IsbUJBQU8sS0FBUDtBQUNIO0FBQ0QsWUFBSUMsWUFBWVQsbUJBQW1CTyxnQkFBbkIsQ0FBaEI7QUFDQSxlQUFPRCxXQUFXRyxTQUFsQjtBQUNIOztBQUVELGFBQVNDLGlCQUFULENBQTJCSixPQUEzQixFQUFvQ0ssSUFBcEMsRUFBMEM7QUFDdEMsWUFBSUgsWUFBWWQsYUFBYVksT0FBYixDQUFoQjtBQUNBLFlBQUlNLGtCQUFrQlgsc0JBQXNCTyxTQUF0QixDQUF0QjtBQUNBLFlBQUlLLE9BQU9GLEtBQUtSLENBQUwsR0FBU1MsZ0JBQWdCVCxDQUFwQztBQUNBLFlBQUlXLE9BQU9ILEtBQUtULENBQUwsR0FBU1UsZ0JBQWdCVixDQUFwQztBQUNBLGVBQU9XLFFBQVF6QixXQUFSLElBQXdCeUIsUUFBUSxDQUFoQyxJQUFxQ0MsUUFBUXpCLFlBQTdDLElBQTZEeUIsUUFBUSxDQUE1RTtBQUNIOztBQUVELGFBQVNDLEtBQVQsQ0FBZUMsT0FBZixFQUF3QjtBQUNwQixZQUFJQyxLQUFLLElBQVQ7QUFDQUEsV0FBR2QsQ0FBSCxHQUFPYSxRQUFRYixDQUFSLElBQWEsQ0FBcEI7QUFDQWMsV0FBR2YsQ0FBSCxHQUFPYyxRQUFRZCxDQUFSLElBQWEsQ0FBcEI7O0FBRUFlLFdBQUdDLEdBQUgsR0FBU0YsUUFBUUUsR0FBakI7QUFDQUQsV0FBR1YsZ0JBQUgsR0FBc0IsTUFBdEI7O0FBRUFVLFdBQUdFLEtBQUg7QUFDSDs7QUFFREosVUFBTUssU0FBTixDQUFnQkQsS0FBaEIsR0FBd0IsU0FBU0EsS0FBVCxHQUFpQjtBQUNyQyxZQUFJRixLQUFLLElBQVQ7O0FBRUFBLFdBQUdOLElBQUgsR0FBVSxJQUFWO0FBQ0FNLFdBQUdJLElBQUgsR0FBVSxJQUFWOztBQUVBLFlBQUlBLE9BQU8sSUFBSUMsWUFBSixDQUFpQjtBQUN4Qm5CLGVBQUdjLEdBQUdkLENBRGtCO0FBRXhCRCxlQUFHZSxHQUFHZixDQUZrQjtBQUd4QmdCLGlCQUFLRCxHQUFHQztBQUhnQixTQUFqQixDQUFYO0FBS0EsWUFBSUssT0FBTyxJQUFJRCxZQUFKLENBQWlCO0FBQ3hCbkIsZUFBR2tCLEtBQUtsQixDQUFMLEdBQVNiLFlBRFk7QUFFeEJZLGVBQUdtQixLQUFLbkIsQ0FGZ0I7QUFHeEJnQixpQkFBS0QsR0FBR0M7QUFIZ0IsU0FBakIsQ0FBWDtBQUtBLFlBQUlQLE9BQU8sSUFBSVcsWUFBSixDQUFpQjtBQUN4Qm5CLGVBQUdvQixLQUFLcEIsQ0FBTCxHQUFTYixZQURZO0FBRXhCWSxlQUFHcUIsS0FBS3JCLENBRmdCO0FBR3hCc0Isb0JBQVEsS0FIZ0I7QUFJeEJOLGlCQUFLRCxHQUFHQztBQUpnQixTQUFqQixDQUFYOztBQU9BRyxhQUFLSSxJQUFMLEdBQVlGLElBQVo7QUFDQUEsYUFBS0UsSUFBTCxHQUFZZCxJQUFaO0FBQ0FBLGFBQUtjLElBQUwsR0FBWSxJQUFaOztBQUVBUixXQUFHTixJQUFILEdBQVVBLElBQVY7QUFDQU0sV0FBR0ksSUFBSCxHQUFVQSxJQUFWO0FBQ0gsS0E3QkQ7O0FBK0JBTixVQUFNSyxTQUFOLENBQWdCTSxPQUFoQixHQUEwQixTQUFTQSxPQUFULEdBQW1CO0FBQ3pDLFlBQUlULEtBQUssSUFBVDtBQUNBLFlBQUlVLFVBQVVWLEdBQUdJLElBQWpCO0FBQ0FNLGdCQUFRQyxJQUFSO0FBQ0EsZUFBTUQsUUFBUUYsSUFBZCxFQUFvQjtBQUNoQkUsc0JBQVVBLFFBQVFGLElBQWxCO0FBQ0FFLG9CQUFRQyxJQUFSO0FBQ0g7QUFDSixLQVJEOztBQVVBYixVQUFNSyxTQUFOLENBQWdCUyxRQUFoQixHQUEyQixTQUFTQSxRQUFULEdBQW9CO0FBQzNDLFlBQUlaLEtBQUssSUFBVDtBQUNBLFlBQUlVLFVBQVVWLEdBQUdJLElBQWpCO0FBQ0FNLGdCQUFRRyxLQUFSO0FBQ0EsZUFBTUgsUUFBUUYsSUFBZCxFQUFvQjtBQUNoQkUsc0JBQVVBLFFBQVFGLElBQWxCO0FBQ0FFLG9CQUFRRyxLQUFSO0FBQ0g7QUFDSixLQVJEOztBQVVBZixVQUFNSyxTQUFOLENBQWdCVyxJQUFoQixHQUF1QixTQUFTQSxJQUFULEdBQWdCO0FBQ25DLFlBQUlkLEtBQUssSUFBVDtBQUNBLFlBQUlMLGtCQUFrQlIsc0JBQXNCYSxHQUFHVixnQkFBekIsQ0FBdEI7O0FBRUEsWUFBSXlCLFVBQVUsSUFBSVYsWUFBSixDQUFpQjtBQUMzQm5CLGVBQUdjLEdBQUdJLElBQUgsQ0FBUWxCLENBQVIsR0FBWVMsZ0JBQWdCVCxDQURKO0FBRTNCRCxlQUFHZSxHQUFHSSxJQUFILENBQVFuQixDQUFSLEdBQVlVLGdCQUFnQlYsQ0FGSjtBQUczQmdCLGlCQUFLRCxHQUFHQztBQUhtQixTQUFqQixDQUFkO0FBS0FjLGdCQUFRUCxJQUFSLEdBQWVSLEdBQUdJLElBQWxCO0FBQ0FKLFdBQUdJLElBQUgsR0FBVVcsT0FBVjtBQUNILEtBWEQ7O0FBYUEsYUFBU1YsWUFBVCxDQUFzQk4sT0FBdEIsRUFBK0I7QUFDM0IsWUFBSUMsS0FBSyxJQUFUOztBQUVBQSxXQUFHZ0IsS0FBSCxHQUFXM0MsWUFBWDtBQUNBMkIsV0FBR2lCLE1BQUgsR0FBWTVDLFlBQVo7QUFDQTJCLFdBQUdPLE1BQUgsR0FBWVIsUUFBUVEsTUFBUixJQUFrQixPQUE5QjtBQUNBUCxXQUFHUSxJQUFILEdBQVVULFFBQVFTLElBQVIsSUFBZ0IsSUFBMUI7QUFDQVIsV0FBR2tCLElBQUgsR0FBVW5CLFFBQVFtQixJQUFSLElBQWdCLElBQTFCO0FBQ0FsQixXQUFHZCxDQUFILEdBQU9hLFFBQVFiLENBQWY7QUFDQWMsV0FBR2YsQ0FBSCxHQUFPYyxRQUFRZCxDQUFmO0FBQ0FlLFdBQUdDLEdBQUgsR0FBU0YsUUFBUUUsR0FBakI7QUFDSDs7QUFFREksaUJBQWFGLFNBQWIsQ0FBdUJnQixTQUF2QixHQUFtQyxTQUFTQSxTQUFULENBQW1CakMsQ0FBbkIsRUFBc0JELENBQXRCLEVBQXlCO0FBQ3hELGFBQUtDLENBQUwsR0FBU0EsQ0FBVDtBQUNBLGFBQUtELENBQUwsR0FBU0EsQ0FBVDtBQUNILEtBSEQ7O0FBS0FvQixpQkFBYUYsU0FBYixDQUF1QlEsSUFBdkIsR0FBOEIsU0FBU0EsSUFBVCxHQUFnQjtBQUMxQyxZQUFJWCxLQUFLLElBQVQ7QUFDQUEsV0FBR0MsR0FBSCxDQUFPbUIsU0FBUCxHQUFtQnBCLEdBQUdPLE1BQXRCO0FBQ0FQLFdBQUdDLEdBQUgsQ0FBT29CLFFBQVAsQ0FBZ0JyQixHQUFHZCxDQUFuQixFQUFzQmMsR0FBR2YsQ0FBekIsRUFBNEJlLEdBQUdnQixLQUEvQixFQUFzQ2hCLEdBQUdpQixNQUF6QztBQUNILEtBSkQ7O0FBTUFaLGlCQUFhRixTQUFiLENBQXVCVSxLQUF2QixHQUErQixTQUFTQSxLQUFULEdBQWlCO0FBQzVDLFlBQUliLEtBQUssSUFBVDtBQUNBQSxXQUFHQyxHQUFILENBQU9xQixTQUFQLENBQWlCdEIsR0FBR2QsQ0FBcEIsRUFBdUJjLEdBQUdmLENBQTFCLEVBQTZCZSxHQUFHZ0IsS0FBaEMsRUFBdUNoQixHQUFHaUIsTUFBMUM7QUFDSCxLQUhEOztBQUtBWixpQkFBYUYsU0FBYixDQUF1Qm9CLEtBQXZCLEdBQStCLFVBQVNDLFlBQVQsRUFBdUI7QUFDbEQsWUFBSXhCLEtBQUssSUFBVDtBQUNBLFlBQUdBLEdBQUdkLENBQUgsSUFBUXNDLGFBQWF0QyxDQUFyQixJQUEwQmMsR0FBR2YsQ0FBSCxJQUFRdUMsYUFBYXZDLENBQWxELEVBQXFEO0FBQ2pELG1CQUFPLElBQVA7QUFDSCxTQUZELE1BRU87QUFDSCxtQkFBTyxLQUFQO0FBQ0g7QUFDSixLQVBEOztBQVNBLGFBQVN3QyxJQUFULENBQWN4QixHQUFkLEVBQW1CO0FBQ2YsWUFBSUQsS0FBSyxJQUFUO0FBQ0FBLFdBQUcwQixzQkFBSCxHQUE0QixFQUE1QjtBQUNBLFlBQUlDLENBQUosRUFBTUMsQ0FBTjtBQUNBLGFBQUlELElBQUksQ0FBUixFQUFZQSxJQUFJeEQsV0FBaEIsRUFBOEJ3RCxLQUFLdEQsWUFBbkMsRUFBaUQ7QUFDN0MsaUJBQUl1RCxJQUFJLENBQVIsRUFBV0EsSUFBSXhELFlBQWYsRUFBOEJ3RCxLQUFLdkQsWUFBbkMsRUFBaUQ7QUFDN0MyQixtQkFBRzBCLHNCQUFILENBQTBCRyxJQUExQixDQUErQixFQUFFM0MsR0FBR3lDLENBQUwsRUFBUTFDLEdBQUcyQyxDQUFYLEVBQS9CO0FBQ0g7QUFDSjtBQUNELFlBQUlFLGdCQUFnQjlCLEdBQUcrQixTQUFILEVBQXBCO0FBQ0EvQixXQUFHZ0MsSUFBSCxHQUFVLElBQUkzQixZQUFKLENBQWlCO0FBQ3ZCSixpQkFBS0EsR0FEa0I7QUFFdkJmLGVBQUc0QyxjQUFjNUMsQ0FGTTtBQUd2QkQsZUFBRzZDLGNBQWM3QyxDQUhNO0FBSXZCc0Isb0JBQVE7QUFKZSxTQUFqQixDQUFWO0FBTUg7O0FBRURrQixTQUFLdEIsU0FBTCxDQUFlNEIsU0FBZixHQUEyQixTQUFTQSxTQUFULEdBQXFCO0FBQzVDLGlCQUFTRSxZQUFULENBQXNCQyxHQUF0QixFQUEyQkMsR0FBM0IsRUFBZ0M7QUFDM0IsbUJBQU9DLEtBQUtDLEtBQUwsQ0FBV0QsS0FBS0UsTUFBTCxNQUFpQkgsTUFBTUQsR0FBTixHQUFZLENBQTdCLENBQVgsSUFBOENBLEdBQXJEO0FBQ0o7QUFDRCxZQUFJbEMsS0FBSyxJQUFUO0FBQ0EsWUFBSWtDLE1BQU0sQ0FBVjtBQUNBLFlBQUlDLE1BQU1uQyxHQUFHMEIsc0JBQUgsQ0FBMEJhLE1BQXBDOztBQUVBLGVBQU92QyxHQUFHMEIsc0JBQUgsQ0FBMEJPLGFBQWFDLEdBQWIsRUFBa0JDLEdBQWxCLENBQTFCLENBQVA7QUFDSCxLQVREOztBQVdBVixTQUFLdEIsU0FBTCxDQUFlcUMsY0FBZixHQUFnQyxTQUFTQSxjQUFULEdBQTBCO0FBQ3RELFlBQUl4QyxLQUFLLElBQVQ7QUFDQSxZQUFJeUMsTUFBTXpDLEdBQUcrQixTQUFILEVBQVY7QUFDQS9CLFdBQUdnQyxJQUFILENBQVE5QyxDQUFSLEdBQVl1RCxJQUFJdkQsQ0FBaEI7QUFDQWMsV0FBR2dDLElBQUgsQ0FBUS9DLENBQVIsR0FBWXdELElBQUl4RCxDQUFoQjtBQUNILEtBTEQ7O0FBT0F3QyxTQUFLdEIsU0FBTCxDQUFlUSxJQUFmLEdBQXNCLFNBQVNBLElBQVQsR0FBZ0I7QUFDbEMsYUFBS3FCLElBQUwsQ0FBVXJCLElBQVY7QUFDSCxLQUZEOztBQUlBYyxTQUFLdEIsU0FBTCxDQUFlVSxLQUFmLEdBQXVCLFNBQVNBLEtBQVQsR0FBaUI7QUFDcEMsYUFBS21CLElBQUwsQ0FBVW5CLEtBQVY7QUFDSCxLQUZEOztBQUlBLGFBQVM2Qix3QkFBVCxDQUFrQ0MsS0FBbEMsRUFBeUNDLE9BQXpDLEVBQWtEO0FBQzlDRCxjQUFNakQsSUFBTixDQUFXYSxNQUFYLEdBQW9CLE9BQXBCO0FBQ0FvQyxjQUFNakQsSUFBTixDQUFXaUIsSUFBWDtBQUNBLFlBQUlrQyxXQUFXRixNQUFNakQsSUFBTixDQUFXUixDQUExQjtBQUNBLFlBQUk0RCxXQUFXSCxNQUFNakQsSUFBTixDQUFXVCxDQUExQjtBQUNBMEQsY0FBTXZDLElBQU4sQ0FBV1MsS0FBWDtBQUNBLFlBQUlFLFVBQVU0QixNQUFNdkMsSUFBTixDQUFXSSxJQUF6QjtBQUNBLFlBQUl1QyxVQUFVSixNQUFNdkMsSUFBcEI7QUFDQTJDLGdCQUFRdkMsSUFBUixHQUFlLElBQWY7QUFDQW1DLGNBQU1qRCxJQUFOLENBQVdjLElBQVgsR0FBa0J1QyxPQUFsQjtBQUNBSixjQUFNakQsSUFBTixHQUFhcUQsT0FBYjtBQUNBSixjQUFNdkMsSUFBTixHQUFhVyxPQUFiO0FBQ0EsWUFBSXhCLFlBQVlkLGFBQWFtRSxPQUFiLENBQWhCO0FBQ0EsWUFBSUksaUJBQWlCaEUsc0JBQXNCTyxTQUF0QixDQUFyQjtBQUNBb0QsY0FBTWpELElBQU4sQ0FBV1IsQ0FBWCxHQUFlMkQsV0FBV0csZUFBZTlELENBQXpDO0FBQ0F5RCxjQUFNakQsSUFBTixDQUFXVCxDQUFYLEdBQWU2RCxXQUFXRSxlQUFlL0QsQ0FBekM7QUFDQTBELGNBQU1qRCxJQUFOLENBQVdhLE1BQVgsR0FBb0IsS0FBcEI7QUFDQW9DLGNBQU1qRCxJQUFOLENBQVdpQixJQUFYO0FBQ0FnQyxjQUFNckQsZ0JBQU4sR0FBeUJDLFNBQXpCO0FBQ0g7O0FBRUQsYUFBUzBELGVBQVQsQ0FBeUJOLEtBQXpCLEVBQWdDO0FBQzVCLFlBQUdBLE1BQU1qRCxJQUFOLENBQVc2QixLQUFYLENBQWlCMkIsS0FBS2xCLElBQXRCLENBQUgsRUFBZ0M7QUFDNUJXLGtCQUFNN0IsSUFBTjtBQUNBNkIsa0JBQU03QixJQUFOO0FBQ0FvQyxpQkFBS1YsY0FBTDtBQUNBVztBQUNBLG1CQUFPLElBQVA7QUFDSDs7QUFHRCxZQUFHUixNQUFNakQsSUFBTixDQUFXNkIsS0FBWCxDQUFpQm9CLE1BQU12QyxJQUF2QixDQUFILEVBQWlDO0FBQzdCZ0Qsc0JBQVVULEtBQVY7QUFDQSxtQkFBTyxLQUFQO0FBQ0g7O0FBRUQsWUFBSVUsVUFBVVYsTUFBTXZDLElBQXBCO0FBQ0EsZUFBTWlELFdBQVdWLE1BQU1qRCxJQUF2QixFQUE2QjtBQUN6QixnQkFBR2lELE1BQU1qRCxJQUFOLENBQVc2QixLQUFYLENBQWlCOEIsT0FBakIsQ0FBSCxFQUE4QjtBQUMxQkQsMEJBQVVULEtBQVY7QUFDQSx1QkFBTyxLQUFQO0FBQ0g7QUFDRFUsc0JBQVVBLFFBQVE3QyxJQUFsQjtBQUNIO0FBQ0QsZUFBTyxJQUFQO0FBQ0g7O0FBRUQ4QyxhQUFTQyxnQkFBVCxDQUEwQixTQUExQixFQUFxQyxVQUFTQyxLQUFULEVBQWdCO0FBQ2pELFlBQUdBLE1BQU1uRSxPQUFOLEtBQWtCLEVBQXJCLEVBQXlCO0FBQ3JCYiwwQkFBYyxLQUFkO0FBQ0gsU0FGRCxNQUVPLElBQUdnRixNQUFNbkUsT0FBTixJQUFpQixFQUFqQixJQUF1Qm1FLE1BQU1uRSxPQUFOLElBQWlCLEVBQXhDLElBQThDbUUsTUFBTW5FLE9BQU4sSUFBaUIsRUFBL0QsSUFBcUVtRSxNQUFNbkUsT0FBTixJQUFpQixFQUF6RixFQUE2RjtBQUFFO0FBQ2xHLGdCQUFJb0UsY0FBY3JFLHFCQUFxQm9FLE1BQU1uRSxPQUEzQixFQUFvQ3NELE1BQU1yRCxnQkFBMUMsS0FBK0RHLGtCQUFrQitELE1BQU1uRSxPQUF4QixFQUFpQ3NELE1BQU1qRCxJQUF2QyxDQUFqRjtBQUNBLGdCQUFHK0QsV0FBSCxFQUFnQjtBQUNaZix5Q0FBeUJDLEtBQXpCLEVBQWdDYSxNQUFNbkUsT0FBdEM7QUFDSDtBQUNKO0FBQ0osS0FURDs7QUFhSjs7Ozs7OztBQU9JLFFBQUlxRSxXQUFXSixTQUFTSyxjQUFULENBQXdCLE1BQXhCLENBQWY7QUFDQUQsYUFBU0UsS0FBVCxDQUFlQyxlQUFmLEdBQWlDLDBCQUFqQztBQUNBSCxhQUFTMUMsS0FBVCxHQUFpQjdDLFdBQWpCO0FBQ0F1RixhQUFTekMsTUFBVCxHQUFrQjdDLFlBQWxCO0FBQ0EsUUFBSTZCLE1BQU15RCxTQUFTSSxVQUFULENBQW9CLElBQXBCLENBQVY7QUFDQSxRQUFJbkIsUUFBUSxJQUFJN0MsS0FBSixDQUFVO0FBQ2xCWixXQUFHZixjQUFZLENBREc7QUFFbEJjLFdBQUdiLGVBQWEsQ0FGRTtBQUdsQjZCLGFBQUtBO0FBSGEsS0FBVixDQUFaOztBQU1BLFFBQUlpRCxPQUFPLElBQUl6QixJQUFKLENBQVN4QixHQUFULENBQVg7O0FBRUEsUUFBSThELGtCQUFrQixDQUF0QixDQWpVdUIsQ0FpVUM7QUFDeEIsUUFBSUMsU0FBUyxFQUFiLENBbFV1QixDQWtVTjtBQUNqQnJCLFVBQU1yRCxnQkFBTixHQUF5QixNQUF6QjtBQUNBcUQsVUFBTWxDLE9BQU47QUFDQSxRQUFJd0QsZUFBZSxDQUFDLENBQXBCOztBQUVBLGFBQVNkLFdBQVQsQ0FBcUJlLEtBQXJCLEVBQTRCO0FBQ3hCWixpQkFBU0ssY0FBVCxDQUF3QixPQUF4QixFQUFpQ1EsV0FBakMsR0FBK0MsWUFBWSxFQUFFRixZQUE3RDtBQUNIOztBQUVEZDs7QUFFQSxhQUFTQyxTQUFULENBQW1CVCxLQUFuQixFQUEwQjtBQUN0QkEsY0FBTS9CLFFBQU47QUFDQStCLGNBQU16QyxLQUFOO0FBQ0FnRCxhQUFLckMsS0FBTDtBQUNBcUMsYUFBS1YsY0FBTDtBQUNBeUIsdUJBQWUsQ0FBQyxDQUFoQjtBQUNBZDtBQUNIOztBQUVELGFBQVNpQixNQUFULEdBQWtCO0FBQ2QsWUFBSS9FLFVBQVVYLG9CQUFvQmlFLE1BQU1yRCxnQkFBMUIsQ0FBZDtBQUNBLFlBQUkrRSxjQUFjNUUsa0JBQWtCSixPQUFsQixFQUEyQnNELE1BQU1qRCxJQUFqQyxDQUFsQjtBQUNBLFlBQUcyRSxXQUFILEVBQWdCO0FBQ1osZ0JBQUlDLFFBQVFyQixnQkFBZ0JOLEtBQWhCLENBQVo7QUFDQSxnQkFBRzJCLEtBQUgsRUFBVTtBQUNONUIseUNBQXlCQyxLQUF6QixFQUFnQ3RELE9BQWhDO0FBQ0g7QUFDRDRELDRCQUFnQk4sS0FBaEI7QUFDSCxTQU5ELE1BTU87QUFDSFMsc0JBQVVULEtBQVY7QUFDSDtBQUNKOztBQUVELGFBQVNoQyxJQUFULEdBQWdCO0FBQ1p1QyxhQUFLdkMsSUFBTDtBQUNBZ0MsY0FBTWxDLE9BQU47QUFDSDs7QUFFRCxhQUFTbEMsUUFBVCxDQUFrQmdHLFNBQWxCLEVBQTZCO0FBQ3hCLFlBQUcvRixXQUFILEVBQWdCO0FBQ2IsZ0JBQUcrRixZQUFZUixrQkFBbUIsT0FBT0MsTUFBekMsRUFBa0Q7QUFDOUNRLHNDQUFzQmpHLFFBQXRCO0FBQ0E7QUFDSDtBQUNEd0YsOEJBQWtCUSxTQUFsQjtBQUNBSDtBQUNBekQ7QUFDQTZELGtDQUFzQmpHLFFBQXRCO0FBQ0g7QUFDSjtBQUNEaUcsMEJBQXNCakcsUUFBdEI7QUFDSCxDQXRYRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgY2FudmFzV2lkdGggPSAxNTIwO1xyXG4gICAgY29uc3QgY2FudmFzSGVpZ2h0ID0gOTIwO1xyXG4gICAgdmFyIFNFR01FTlRfU0laRSA9IDIwXHJcbiAgICB2YXIgRlBTID0gNjA7XHJcbiAgICB2YXIgZ2FtZUxvb3A7XHJcbiAgICB2YXIgZ2FtZVJ1bm5pbmcgPSB0cnVlO1xyXG5cclxuICAgIHZhciBkaXJLZXlMb29rdXAgPSB7XHJcbiAgICAgICAgMzc6ICdXRVNUJyxcclxuICAgICAgICAzODogJ05PUlRIJyxcclxuICAgICAgICAzOTogJ0VBU1QnLFxyXG4gICAgICAgIDQwOiAnU09VVEgnXHJcbiAgICB9O1xyXG5cclxuICAgICB2YXIgcmV2ZXJzZURpcktleUxvb2t1cCA9IHtcclxuICAgICAgICBXRVNUOiAzNyxcclxuICAgICAgICBOT1JUSDogMzgsXHJcbiAgICAgICAgRUFTVDogMzksXHJcbiAgICAgICAgU09VVEg6IDQwXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciB1bmFsbG93ZWREaXJMb29rdXAgPSB7XHJcbiAgICAgICAgJ1dFU1QnOiAzOSxcclxuICAgICAgICAnTk9SVEgnOiA0MCxcclxuICAgICAgICAnRUFTVCc6IDM3LFxyXG4gICAgICAgICdTT1VUSCc6IDM4XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciB1cGRhdGVIZWFkQnlEaXJlY3Rpb24gPSB7XHJcbiAgICAgICAgTk9SVEg6IHtcclxuICAgICAgICAgICAgeTogLTEgKiBTRUdNRU5UX1NJWkUsXHJcbiAgICAgICAgICAgIHg6IDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIFNPVVRIOiB7XHJcbiAgICAgICAgICAgIHk6IFNFR01FTlRfU0laRSxcclxuICAgICAgICAgICAgeDogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgRUFTVDoge1xyXG4gICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICB4OiBTRUdNRU5UX1NJWkVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFdFU1Q6IHtcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgeDogLTEgKiBTRUdNRU5UX1NJWkVcclxuICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdXBkYXRlVGFpbEJ5RGlyZWN0aW9uID0ge1xyXG4gICAgICAgIE5PUlRIOiB7XHJcbiAgICAgICAgICAgIHk6IFNFR01FTlRfU0laRSxcclxuICAgICAgICAgICAgeDogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgU09VVEg6IHtcclxuICAgICAgICAgICAgeTogLTEgKiBTRUdNRU5UX1NJWkUsXHJcbiAgICAgICAgICAgIHg6IDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIEVBU1Q6IHtcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgeDogLTEgKiBTRUdNRU5UX1NJWkVcclxuICAgICAgICB9LFxyXG4gICAgICAgIFdFU1Q6IHtcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgeDogU0VHTUVOVF9TSVpFXHJcbiAgICAgICAgfSwgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gdmFsaWREaXJlY3Rpb25DaGFuZ2Uoa2V5Q29kZSwgY3VycmVudERpcmVjdGlvbikge1xyXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJLZXlMb29rdXBba2V5Q29kZV07XHJcbiAgICAgICAgaWYoY3VycmVudERpcmVjdGlvbiA9PT0gZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHVuYWxsb3dlZCA9IHVuYWxsb3dlZERpckxvb2t1cFtjdXJyZW50RGlyZWN0aW9uXVxyXG4gICAgICAgIHJldHVybiBrZXlDb2RlICE9IHVuYWxsb3dlZDtcclxuICAgIH0gICAgXHJcblxyXG4gICAgZnVuY3Rpb24gaW5zaWRlV29ybGRCb3VuZHMoa2V5Q29kZSwgaGVhZCkge1xyXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJLZXlMb29rdXBba2V5Q29kZV07XHJcbiAgICAgICAgdmFyIGRpcmVjdGlvblVwZGF0ZSA9IHVwZGF0ZUhlYWRCeURpcmVjdGlvbltkaXJlY3Rpb25dO1xyXG4gICAgICAgIHZhciBuZXdYID0gaGVhZC54ICsgZGlyZWN0aW9uVXBkYXRlLng7XHJcbiAgICAgICAgdmFyIG5ld1kgPSBoZWFkLnkgKyBkaXJlY3Rpb25VcGRhdGUueTtcclxuICAgICAgICByZXR1cm4gbmV3WCA8PSBjYW52YXNXaWR0aCAmJiAgbmV3WCA+PSAwICYmIG5ld1kgPD0gY2FudmFzSGVpZ2h0ICYmIG5ld1kgPj0gMDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gU25ha2Uob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7ICAgXHJcbiAgICAgICAgbWUueCA9IG9wdGlvbnMueCB8fCAwO1xyXG4gICAgICAgIG1lLnkgPSBvcHRpb25zLnkgfHwgMDtcclxuXHJcbiAgICAgICAgbWUuY3R4ID0gb3B0aW9ucy5jdHg7XHJcbiAgICAgICAgbWUuY3VycmVudERpcmVjdGlvbiA9ICdFQVNUJztcclxuXHJcbiAgICAgICAgbWUucmVzZXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBTbmFrZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcclxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgICAgIFxyXG4gICAgICAgIG1lLmhlYWQgPSBudWxsO1xyXG4gICAgICAgIG1lLnRhaWwgPSBudWxsO1xyXG5cclxuICAgICAgICB2YXIgdGFpbCA9IG5ldyBTbmFrZVNlZ21lbnQoe1xyXG4gICAgICAgICAgICB4OiBtZS54LFxyXG4gICAgICAgICAgICB5OiBtZS55LFxyXG4gICAgICAgICAgICBjdHg6IG1lLmN0eFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBib2R5ID0gbmV3IFNuYWtlU2VnbWVudCh7XHJcbiAgICAgICAgICAgIHg6IHRhaWwueCArIFNFR01FTlRfU0laRSxcclxuICAgICAgICAgICAgeTogdGFpbC55LFxyXG4gICAgICAgICAgICBjdHg6IG1lLmN0eFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBoZWFkID0gbmV3IFNuYWtlU2VnbWVudCh7XHJcbiAgICAgICAgICAgIHg6IGJvZHkueCArIFNFR01FTlRfU0laRSxcclxuICAgICAgICAgICAgeTogYm9keS55LFxyXG4gICAgICAgICAgICBjb2xvdXI6ICdyZWQnLFxyXG4gICAgICAgICAgICBjdHg6IG1lLmN0eFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0YWlsLm5leHQgPSBib2R5O1xyXG4gICAgICAgIGJvZHkubmV4dCA9IGhlYWQ7XHJcbiAgICAgICAgaGVhZC5uZXh0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgbWUuaGVhZCA9IGhlYWQ7XHJcbiAgICAgICAgbWUudGFpbCA9IHRhaWw7XHJcbiAgICB9O1xyXG5cclxuICAgIFNuYWtlLnByb3RvdHlwZS5kcmF3QWxsID0gZnVuY3Rpb24gZHJhd0FsbCgpIHtcclxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzZWdtZW50ID0gbWUudGFpbDtcclxuICAgICAgICBzZWdtZW50LmRyYXcoKTtcclxuICAgICAgICB3aGlsZShzZWdtZW50Lm5leHQpIHtcclxuICAgICAgICAgICAgc2VnbWVudCA9IHNlZ21lbnQubmV4dDtcclxuICAgICAgICAgICAgc2VnbWVudC5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBTbmFrZS5wcm90b3R5cGUuY2xlYXJBbGwgPSBmdW5jdGlvbiBjbGVhckFsbCgpIHtcclxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgICAgIHZhciBzZWdtZW50ID0gbWUudGFpbDtcclxuICAgICAgICBzZWdtZW50LmNsZWFyKCk7XHJcbiAgICAgICAgd2hpbGUoc2VnbWVudC5uZXh0KSB7XHJcbiAgICAgICAgICAgIHNlZ21lbnQgPSBzZWdtZW50Lm5leHQ7XHJcbiAgICAgICAgICAgIHNlZ21lbnQuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFNuYWtlLnByb3RvdHlwZS5ncm93ID0gZnVuY3Rpb24gZ3JvdygpIHtcclxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgICAgIHZhciBkaXJlY3Rpb25VcGRhdGUgPSB1cGRhdGVUYWlsQnlEaXJlY3Rpb25bbWUuY3VycmVudERpcmVjdGlvbl07XHJcblxyXG4gICAgICAgIHZhciBuZXdUYWlsID0gbmV3IFNuYWtlU2VnbWVudCh7XHJcbiAgICAgICAgICAgIHg6IG1lLnRhaWwueCArIGRpcmVjdGlvblVwZGF0ZS54LFxyXG4gICAgICAgICAgICB5OiBtZS50YWlsLnkgKyBkaXJlY3Rpb25VcGRhdGUueSxcclxuICAgICAgICAgICAgY3R4OiBtZS5jdHhcclxuICAgICAgICB9KTtcclxuICAgICAgICBuZXdUYWlsLm5leHQgPSBtZS50YWlsO1xyXG4gICAgICAgIG1lLnRhaWwgPSBuZXdUYWlsO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBTbmFrZVNlZ21lbnQob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblxyXG4gICAgICAgIG1lLndpZHRoID0gU0VHTUVOVF9TSVpFO1xyXG4gICAgICAgIG1lLmhlaWdodCA9IFNFR01FTlRfU0laRTtcclxuICAgICAgICBtZS5jb2xvdXIgPSBvcHRpb25zLmNvbG91ciB8fCBcImJsYWNrXCI7XHJcbiAgICAgICAgbWUubmV4dCA9IG9wdGlvbnMubmV4dCB8fCBudWxsO1xyXG4gICAgICAgIG1lLnByZXYgPSBvcHRpb25zLnByZXYgfHwgbnVsbDtcclxuICAgICAgICBtZS54ID0gb3B0aW9ucy54O1xyXG4gICAgICAgIG1lLnkgPSBvcHRpb25zLnk7XHJcbiAgICAgICAgbWUuY3R4ID0gb3B0aW9ucy5jdHg7XHJcbiAgICB9XHJcblxyXG4gICAgU25ha2VTZWdtZW50LnByb3RvdHlwZS51cGRhdGVQb3MgPSBmdW5jdGlvbiB1cGRhdGVQb3MoeCwgeSkge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH07ICBcclxuXHJcbiAgICBTbmFrZVNlZ21lbnQucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiBkcmF3KCkge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICAgICAgbWUuY3R4LmZpbGxTdHlsZSA9IG1lLmNvbG91cjtcclxuICAgICAgICBtZS5jdHguZmlsbFJlY3QobWUueCwgbWUueSwgbWUud2lkdGgsIG1lLmhlaWdodCk7XHJcbiAgICB9O1xyXG5cclxuICAgIFNuYWtlU2VnbWVudC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcclxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgICAgIG1lLmN0eC5jbGVhclJlY3QobWUueCwgbWUueSwgbWUud2lkdGgsIG1lLmhlaWdodCk7XHJcbiAgICB9O1xyXG5cclxuICAgIFNuYWtlU2VnbWVudC5wcm90b3R5cGUuZXF1YWwgPSBmdW5jdGlvbihvdGhlclNlZ21lbnQpIHtcclxuICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgICAgIGlmKG1lLnggPT0gb3RoZXJTZWdtZW50LnggJiYgbWUueSA9PSBvdGhlclNlZ21lbnQueSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBGb29kKGN0eCkge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICAgICAgbWUuYWxsRm9vZFBvc2l0aW9uc0xvb2t1cCA9IFtdO1xyXG4gICAgICAgIHZhciBpLGo7XHJcbiAgICAgICAgZm9yKGkgPSAwIDsgaSA8IGNhbnZhc1dpZHRoIDsgaSArPSBTRUdNRU5UX1NJWkUpIHtcclxuICAgICAgICAgICAgZm9yKGogPSAwOyBqIDwgY2FudmFzSGVpZ2h0IDsgaiArPSBTRUdNRU5UX1NJWkUpIHtcclxuICAgICAgICAgICAgICAgIG1lLmFsbEZvb2RQb3NpdGlvbnNMb29rdXAucHVzaCh7IHg6IGksIHk6IGogfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN0YXJ0UG9zaXRpb24gPSBtZS5nZXRSYW5kWFkoKTtcclxuICAgICAgICBtZS5pdGVtID0gbmV3IFNuYWtlU2VnbWVudCh7XHJcbiAgICAgICAgICAgIGN0eDogY3R4LFxyXG4gICAgICAgICAgICB4OiBzdGFydFBvc2l0aW9uLngsXHJcbiAgICAgICAgICAgIHk6IHN0YXJ0UG9zaXRpb24ueSxcclxuICAgICAgICAgICAgY29sb3VyOiAnZ3JlZW4nXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgRm9vZC5wcm90b3R5cGUuZ2V0UmFuZFhZID0gZnVuY3Rpb24gZ2V0UmFuZFhZKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldFJhbmRvbUludChtaW4sIG1heCkge1xyXG4gICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG1pbiA9IDA7XHJcbiAgICAgICAgdmFyIG1heCA9IG1lLmFsbEZvb2RQb3NpdGlvbnNMb29rdXAubGVuZ3RoO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBtZS5hbGxGb29kUG9zaXRpb25zTG9va3VwW2dldFJhbmRvbUludChtaW4sIG1heCldO1xyXG4gICAgfTtcclxuXHJcbiAgICBGb29kLnByb3RvdHlwZS5zZXROZXdQb3NpdGlvbiA9IGZ1bmN0aW9uIHNldE5ld1Bvc2l0aW9uKCkge1xyXG4gICAgICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHBvcyA9IG1lLmdldFJhbmRYWSgpO1xyXG4gICAgICAgIG1lLml0ZW0ueCA9IHBvcy54O1xyXG4gICAgICAgIG1lLml0ZW0ueSA9IHBvcy55OyAgIFxyXG4gICAgfTtcclxuXHJcbiAgICBGb29kLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gZHJhdygpIHtcclxuICAgICAgICB0aGlzLml0ZW0uZHJhdygpO1xyXG4gICAgfVxyXG5cclxuICAgIEZvb2QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtLmNsZWFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdXBkYXRlU25ha2VGcm9tRGlyZWN0aW9uKHNuYWtlLCBrZXljb2RlKSB7XHJcbiAgICAgICAgc25ha2UuaGVhZC5jb2xvdXIgPSAnYmxhY2snO1xyXG4gICAgICAgIHNuYWtlLmhlYWQuZHJhdygpO1xyXG4gICAgICAgIHZhciBjdXJIZWFkWCA9IHNuYWtlLmhlYWQueDtcclxuICAgICAgICB2YXIgY3VySGVhZFkgPSBzbmFrZS5oZWFkLnk7XHJcbiAgICAgICAgc25ha2UudGFpbC5jbGVhcigpO1xyXG4gICAgICAgIHZhciBuZXdUYWlsID0gc25ha2UudGFpbC5uZXh0O1xyXG4gICAgICAgIHZhciBuZXdIZWFkID0gc25ha2UudGFpbFxyXG4gICAgICAgIG5ld0hlYWQubmV4dCA9IG51bGw7XHJcbiAgICAgICAgc25ha2UuaGVhZC5uZXh0ID0gbmV3SGVhZDtcclxuICAgICAgICBzbmFrZS5oZWFkID0gbmV3SGVhZDtcclxuICAgICAgICBzbmFrZS50YWlsID0gbmV3VGFpbDtcclxuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZGlyS2V5TG9va3VwW2tleWNvZGVdO1xyXG4gICAgICAgIHZhciBkaXJjdGlvblVwZGF0ZSA9IHVwZGF0ZUhlYWRCeURpcmVjdGlvbltkaXJlY3Rpb25dO1xyXG4gICAgICAgIHNuYWtlLmhlYWQueCA9IGN1ckhlYWRYICsgZGlyY3Rpb25VcGRhdGUueDtcclxuICAgICAgICBzbmFrZS5oZWFkLnkgPSBjdXJIZWFkWSArIGRpcmN0aW9uVXBkYXRlLnk7XHJcbiAgICAgICAgc25ha2UuaGVhZC5jb2xvdXIgPSAncmVkJztcclxuICAgICAgICBzbmFrZS5oZWFkLmRyYXcoKTtcclxuICAgICAgICBzbmFrZS5jdXJyZW50RGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNoZWNrQ29sbGlzaW9ucyhzbmFrZSkge1xyXG4gICAgICAgIGlmKHNuYWtlLmhlYWQuZXF1YWwoZm9vZC5pdGVtKSkge1xyXG4gICAgICAgICAgICBzbmFrZS5ncm93KCk7XHJcbiAgICAgICAgICAgIHNuYWtlLmdyb3coKTtcclxuICAgICAgICAgICAgZm9vZC5zZXROZXdQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICB1cGRhdGVTY29yZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBpZihzbmFrZS5oZWFkLmVxdWFsKHNuYWtlLnRhaWwpKSB7XHJcbiAgICAgICAgICAgIHJlc2V0R2FtZShzbmFrZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBjdXJyZW50ID0gc25ha2UudGFpbDtcclxuICAgICAgICB3aGlsZShjdXJyZW50ICE9IHNuYWtlLmhlYWQpIHtcclxuICAgICAgICAgICAgaWYoc25ha2UuaGVhZC5lcXVhbChjdXJyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmVzZXRHYW1lKHNuYWtlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICBpZihldmVudC5rZXlDb2RlID09PSA4MSkge1xyXG4gICAgICAgICAgICBnYW1lUnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSBpZihldmVudC5rZXlDb2RlID09IDM3IHx8IGV2ZW50LmtleUNvZGUgPT0gMzkgfHwgZXZlbnQua2V5Q29kZSA9PSAzOCB8fCBldmVudC5rZXlDb2RlID09IDQwKSB7IC8vTEVGVFxyXG4gICAgICAgICAgICB2YXIgdmFsaWRVcGRhdGUgPSB2YWxpZERpcmVjdGlvbkNoYW5nZShldmVudC5rZXlDb2RlLCBzbmFrZS5jdXJyZW50RGlyZWN0aW9uKSAmJiBpbnNpZGVXb3JsZEJvdW5kcyhldmVudC5rZXlDb2RlLCBzbmFrZS5oZWFkKTtcclxuICAgICAgICAgICAgaWYodmFsaWRVcGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVNuYWtlRnJvbURpcmVjdGlvbihzbmFrZSwgZXZlbnQua2V5Q29kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG5cclxuLypcclxuICAgICAgICAgICAgICAgICAoXykgICAgICBcclxuICBfIF9fIF9fXyAgIF9fIF8gXyBfIF9fICBcclxuIHwgJ18gYCBfIFxcIC8gX2AgfCB8ICdfIFxcIFxyXG4gfCB8IHwgfCB8IHwgKF98IHwgfCB8IHwgfFxyXG4gfF98IHxffCB8X3xcXF9fLF98X3xffCB8X3xcclxuKi9cclxuICAgIHZhciBjYW52YXNFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluJyk7XHJcbiAgICBjYW52YXNFbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgxNTgsIDE2NywgMTg0LCAwLjIpJztcclxuICAgIGNhbnZhc0VsLndpZHRoID0gY2FudmFzV2lkdGg7XHJcbiAgICBjYW52YXNFbC5oZWlnaHQgPSBjYW52YXNIZWlnaHQ7XHJcbiAgICB2YXIgY3R4ID0gY2FudmFzRWwuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIHZhciBzbmFrZSA9IG5ldyBTbmFrZSh7XHJcbiAgICAgICAgeDogY2FudmFzV2lkdGgvMixcclxuICAgICAgICB5OiBjYW52YXNIZWlnaHQvMixcclxuICAgICAgICBjdHg6IGN0eFxyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIGZvb2QgPSBuZXcgRm9vZChjdHgpO1xyXG5cclxuICAgIHZhciBsYXN0RnJhbWVUaW1lTXMgPSAwIC8vIFRoZSBsYXN0IHRpbWUgdGhlIGxvb3Agd2FzIHJ1blxyXG4gICAgdmFyIG1heEZQUyA9IDMxOyAvLyBUaGUgbWF4aW11bSBGUFMgd2Ugd2FudCB0byBhbGxvd1xyXG4gICAgc25ha2UuY3VycmVudERpcmVjdGlvbiA9ICdFQVNUJztcclxuICAgIHNuYWtlLmRyYXdBbGwoKTtcclxuICAgIHZhciBjdXJyZW50U2NvcmUgPSAtMTtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gdXBkYXRlU2NvcmUodmFsdWUpIHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNjb3JlXCIpLnRleHRDb250ZW50ID0gXCJTQ09SRTogXCIgKyArK2N1cnJlbnRTY29yZTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTY29yZSgpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2V0R2FtZShzbmFrZSkge1xyXG4gICAgICAgIHNuYWtlLmNsZWFyQWxsKCk7XHJcbiAgICAgICAgc25ha2UucmVzZXQoKTtcclxuICAgICAgICBmb29kLmNsZWFyKCk7XHJcbiAgICAgICAgZm9vZC5zZXROZXdQb3NpdGlvbigpO1xyXG4gICAgICAgIGN1cnJlbnRTY29yZSA9IC0xO1xyXG4gICAgICAgIHVwZGF0ZVNjb3JlKCk7ICAgICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1cGRhdGUoKSB7XHJcbiAgICAgICAgdmFyIGtleUNvZGUgPSByZXZlcnNlRGlyS2V5TG9va3VwW3NuYWtlLmN1cnJlbnREaXJlY3Rpb25dO1xyXG4gICAgICAgIHZhciBpbnNpZGVXb3JsZCA9IGluc2lkZVdvcmxkQm91bmRzKGtleUNvZGUsIHNuYWtlLmhlYWQpO1xyXG4gICAgICAgIGlmKGluc2lkZVdvcmxkKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGVjayA9IGNoZWNrQ29sbGlzaW9ucyhzbmFrZSk7XHJcbiAgICAgICAgICAgIGlmKGNoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVTbmFrZUZyb21EaXJlY3Rpb24oc25ha2UsIGtleUNvZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNoZWNrQ29sbGlzaW9ucyhzbmFrZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzZXRHYW1lKHNuYWtlKTsgICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhdygpIHtcclxuICAgICAgICBmb29kLmRyYXcoKTtcclxuICAgICAgICBzbmFrZS5kcmF3QWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2FtZUxvb3AodGltZVN0YW1wKSB7XHJcbiAgICAgICAgIGlmKGdhbWVSdW5uaW5nKSB7XHJcbiAgICAgICAgICAgIGlmKHRpbWVTdGFtcCA8IGxhc3RGcmFtZVRpbWVNcyArICgxMDAwIC8gbWF4RlBTKSkge1xyXG4gICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGdhbWVMb29wKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsYXN0RnJhbWVUaW1lTXMgPSB0aW1lU3RhbXA7XHJcbiAgICAgICAgICAgIHVwZGF0ZSgpO1xyXG4gICAgICAgICAgICBkcmF3KCk7XHJcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShnYW1lTG9vcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGdhbWVMb29wKTtcclxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hcHAuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ]);